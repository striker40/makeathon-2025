{"ast":null,"code":"export const qnaContent = `# MIT OOP Q&A\n\n**1. What is an object in Python, and what does it consist of?**\n\n*   **Answer:** In Python, everything is an object. An object is an instance of a specific type (e.g., \\`int\\`, \\`string\\`, \\`list\\`, or a custom class). Every object has:\n    *   A type\n    *   An internal data representation (can be primitive or composite)\n    *   A set of procedures (methods) for interacting with the object.\n\n**2. What are the key advantages of using OOP?**\n\n*   **Answer:** The advantages of OOP are:\n    *   Bundling data and procedures that operate on that data into well-defined interfaces.\n    *   Divide-and-conquer development: Implement and test behavior of each class separately, increasing modularity.\n    *   Code reuse: Classes can be reused, and modules often define new classes.\n    *   Inheritance: Subclasses can redefine or extend the behavior of a superclass.\n\n**3. What is a class, and what's the difference between a class and an object?**\n\n*   **Answer:** A class is a blueprint or a template for creating objects.  It defines the attributes (data) and methods (functions) that the objects of that class will have.  An object is an *instance* of a class. Think of a class as a cookie cutter, and an object as the cookie you cut out.  You define the shape (class) and then create many cookies (objects) from it.\n\n**4. What are attributes?**\n\n*   **Answer:** Attributes are data and procedures that \"belong\" to a class.\n    *   Data attributes: These are the data (variables) associated with an object.  For example, a \\`Coordinate\\` object might have \\`x\\` and \\`y\\` as data attributes.\n    *   Methods (procedural attributes): These are functions that operate on the object's data. For example, a \\`Coordinate\\` object might have a \\`distance\\` method.\n\n**5. How do you create an instance of a class?**\n\n*   **Answer:** You create an instance of a class by calling the class name like a function, passing in any required arguments to the \\`\\`\\`__init__\\`\\`\\` method.  For example:\n    \\`\\`\\`python\nc = Coordinate(3, 4) # Creates an instance 'c' of the Coordinate class\n\\`\\`\\`\n\n**6. What is the \\`\\`\\`__init__\\`\\`\\` method used for?**\n\n*   **Answer:** The \\`\\`\\`__init__\\`\\`\\` method is a special method called a *constructor*. It's automatically called when a new instance of a class is created.  It's used to initialize the object's data attributes.  The first argument to \\`\\`\\`__init__\\`\\`\\` is always \\`self\\`, which refers to the object being created.\n    \\`\\`\\`python\nclass Coordinate(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\\`\\`\\`\n\n**7. What does the \\`self\\` parameter refer to in methods?**\n\n*   **Answer:** The \\`self\\` parameter refers to the instance of the class that the method is being called on.  It's a convention to name this parameter \\`self\\`. Python automatically passes the object itself as the first argument to a method.  You use \\`self\\` to access the object's attributes within the method.\n\n**8. How do you access the attributes and methods of an object?**\n\n*   **Answer:** You use the dot (\\`.\\`) operator to access attributes and methods of an object.\n    \\`\\`\\`python\nc = Coordinate(3, 4)\nprint(c.x)      # Accesses the 'x' attribute of the 'c' object.\nprint(c.distance(zero)) # Calls the 'distance' method of the 'c' object, passing 'zero' as the 'other' argument.\n\\`\\`\\`\n\n**9. What is the \\`\\`\\`__str__\\`\\`\\` method used for?**\n\n*   **Answer:** The \\`\\`\\`__str__\\`\\`\\` method is a special method that's called when you use the \\`print()\\` function on an object.  It should return a string representation of the object. If you don't define \\`\\`\\`__str__\\`\\`\\`, Python will use a default representation, which is usually not very informative.\n    \\`\\`\\`python\nclass Coordinate(object):\n    def __str__(self):\n        return \"<\" + str(self.x) + \",\" + str(self.y) + \">\"\n\nc = Coordinate(3, 4)\nprint(c)  # Output: <3,4>\n\\`\\`\\`\n\n**10. How do you check if an object is an instance of a particular class?**\n\n*   **Answer:** You use the \\`isinstance()\\` function.  It takes two arguments: the object to check and the class.  It returns \\`True\\` if the object is an instance of the class (or a subclass of the class), and \\`False\\` otherwise.\n    \\`\\`\\`python\nc = Coordinate(3, 4)\nprint(isinstance(c, Coordinate)) # Output: True\nprint(isinstance(c, int))        # Output: False\n\\`\\`\\``;","map":{"version":3,"names":["qnaContent"],"sources":["/home/striker/makeathon-2025/makeathon/src/qnaContent.js"],"sourcesContent":["export const qnaContent = `# MIT OOP Q&A\n\n**1. What is an object in Python, and what does it consist of?**\n\n*   **Answer:** In Python, everything is an object. An object is an instance of a specific type (e.g., \\`int\\`, \\`string\\`, \\`list\\`, or a custom class). Every object has:\n    *   A type\n    *   An internal data representation (can be primitive or composite)\n    *   A set of procedures (methods) for interacting with the object.\n\n**2. What are the key advantages of using OOP?**\n\n*   **Answer:** The advantages of OOP are:\n    *   Bundling data and procedures that operate on that data into well-defined interfaces.\n    *   Divide-and-conquer development: Implement and test behavior of each class separately, increasing modularity.\n    *   Code reuse: Classes can be reused, and modules often define new classes.\n    *   Inheritance: Subclasses can redefine or extend the behavior of a superclass.\n\n**3. What is a class, and what's the difference between a class and an object?**\n\n*   **Answer:** A class is a blueprint or a template for creating objects.  It defines the attributes (data) and methods (functions) that the objects of that class will have.  An object is an *instance* of a class. Think of a class as a cookie cutter, and an object as the cookie you cut out.  You define the shape (class) and then create many cookies (objects) from it.\n\n**4. What are attributes?**\n\n*   **Answer:** Attributes are data and procedures that \"belong\" to a class.\n    *   Data attributes: These are the data (variables) associated with an object.  For example, a \\`Coordinate\\` object might have \\`x\\` and \\`y\\` as data attributes.\n    *   Methods (procedural attributes): These are functions that operate on the object's data. For example, a \\`Coordinate\\` object might have a \\`distance\\` method.\n\n**5. How do you create an instance of a class?**\n\n*   **Answer:** You create an instance of a class by calling the class name like a function, passing in any required arguments to the \\`\\`\\`__init__\\`\\`\\` method.  For example:\n    \\`\\`\\`python\nc = Coordinate(3, 4) # Creates an instance 'c' of the Coordinate class\n\\`\\`\\`\n\n**6. What is the \\`\\`\\`__init__\\`\\`\\` method used for?**\n\n*   **Answer:** The \\`\\`\\`__init__\\`\\`\\` method is a special method called a *constructor*. It's automatically called when a new instance of a class is created.  It's used to initialize the object's data attributes.  The first argument to \\`\\`\\`__init__\\`\\`\\` is always \\`self\\`, which refers to the object being created.\n    \\`\\`\\`python\nclass Coordinate(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\\`\\`\\`\n\n**7. What does the \\`self\\` parameter refer to in methods?**\n\n*   **Answer:** The \\`self\\` parameter refers to the instance of the class that the method is being called on.  It's a convention to name this parameter \\`self\\`. Python automatically passes the object itself as the first argument to a method.  You use \\`self\\` to access the object's attributes within the method.\n\n**8. How do you access the attributes and methods of an object?**\n\n*   **Answer:** You use the dot (\\`.\\`) operator to access attributes and methods of an object.\n    \\`\\`\\`python\nc = Coordinate(3, 4)\nprint(c.x)      # Accesses the 'x' attribute of the 'c' object.\nprint(c.distance(zero)) # Calls the 'distance' method of the 'c' object, passing 'zero' as the 'other' argument.\n\\`\\`\\`\n\n**9. What is the \\`\\`\\`__str__\\`\\`\\` method used for?**\n\n*   **Answer:** The \\`\\`\\`__str__\\`\\`\\` method is a special method that's called when you use the \\`print()\\` function on an object.  It should return a string representation of the object. If you don't define \\`\\`\\`__str__\\`\\`\\`, Python will use a default representation, which is usually not very informative.\n    \\`\\`\\`python\nclass Coordinate(object):\n    def __str__(self):\n        return \"<\" + str(self.x) + \",\" + str(self.y) + \">\"\n\nc = Coordinate(3, 4)\nprint(c)  # Output: <3,4>\n\\`\\`\\`\n\n**10. How do you check if an object is an instance of a particular class?**\n\n*   **Answer:** You use the \\`isinstance()\\` function.  It takes two arguments: the object to check and the class.  It returns \\`True\\` if the object is an instance of the class (or a subclass of the class), and \\`False\\` otherwise.\n    \\`\\`\\`python\nc = Coordinate(3, 4)\nprint(isinstance(c, Coordinate)) # Output: True\nprint(isinstance(c, int))        # Output: False\n\\`\\`\\``;\n"],"mappings":"AAAA,OAAO,MAAMA,UAAU,GAAG;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}