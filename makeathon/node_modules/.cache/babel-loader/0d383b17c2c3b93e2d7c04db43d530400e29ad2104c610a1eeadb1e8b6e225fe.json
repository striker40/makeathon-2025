{"ast":null,"code":"/**\r\n * @import {Space} from 'property-information'\r\n */\n\nimport { Info } from './info.js';\nimport * as types from './types.js';\nconst checks = /** @type {ReadonlyArray<keyof typeof types>} */\nObject.keys(types);\nexport class DefinedInfo extends Info {\n  /**\r\n   * @constructor\r\n   * @param {string} property\r\n   *   Property.\r\n   * @param {string} attribute\r\n   *   Attribute.\r\n   * @param {number | null | undefined} [mask]\r\n   *   Mask.\r\n   * @param {Space | undefined} [space]\r\n   *   Space.\r\n   * @returns\r\n   *   Info.\r\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1;\n    super(property, attribute);\n    mark(this, 'space', space);\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index];\n        mark(this, checks[index], (mask & types[check]) === types[check]);\n      }\n    }\n  }\n}\nDefinedInfo.prototype.defined = true;\n\n/**\r\n * @template {keyof DefinedInfo} Key\r\n *   Key type.\r\n * @param {DefinedInfo} values\r\n *   Info.\r\n * @param {Key} key\r\n *   Key.\r\n * @param {DefinedInfo[Key]} value\r\n *   Value.\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\nfunction mark(values, key, value) {\n  if (value) {\n    values[key] = value;\n  }\n}","map":{"version":3,"names":["Info","types","checks","Object","keys","DefinedInfo","constructor","property","attribute","mask","space","index","mark","length","check","prototype","defined","values","key","value"],"sources":["C:/Users/smart/Downloads/Final Project P20119/makeathon-2025/makeathon/node_modules/property-information/lib/util/defined-info.js"],"sourcesContent":["/**\r\n * @import {Space} from 'property-information'\r\n */\r\n\r\nimport {Info} from './info.js'\r\nimport * as types from './types.js'\r\n\r\nconst checks = /** @type {ReadonlyArray<keyof typeof types>} */ (\r\n  Object.keys(types)\r\n)\r\n\r\nexport class DefinedInfo extends Info {\r\n  /**\r\n   * @constructor\r\n   * @param {string} property\r\n   *   Property.\r\n   * @param {string} attribute\r\n   *   Attribute.\r\n   * @param {number | null | undefined} [mask]\r\n   *   Mask.\r\n   * @param {Space | undefined} [space]\r\n   *   Space.\r\n   * @returns\r\n   *   Info.\r\n   */\r\n  constructor(property, attribute, mask, space) {\r\n    let index = -1\r\n\r\n    super(property, attribute)\r\n\r\n    mark(this, 'space', space)\r\n\r\n    if (typeof mask === 'number') {\r\n      while (++index < checks.length) {\r\n        const check = checks[index]\r\n        mark(this, checks[index], (mask & types[check]) === types[check])\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nDefinedInfo.prototype.defined = true\r\n\r\n/**\r\n * @template {keyof DefinedInfo} Key\r\n *   Key type.\r\n * @param {DefinedInfo} values\r\n *   Info.\r\n * @param {Key} key\r\n *   Key.\r\n * @param {DefinedInfo[Key]} value\r\n *   Value.\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\nfunction mark(values, key, value) {\r\n  if (value) {\r\n    values[key] = value\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA,SAAQA,IAAI,QAAO,WAAW;AAC9B,OAAO,KAAKC,KAAK,MAAM,YAAY;AAEnC,MAAMC,MAAM,GAAG;AACbC,MAAM,CAACC,IAAI,CAACH,KAAK,CAClB;AAED,OAAO,MAAMI,WAAW,SAASL,IAAI,CAAC;EACpC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEM,WAAWA,CAACC,QAAQ,EAAEC,SAAS,EAAEC,IAAI,EAAEC,KAAK,EAAE;IAC5C,IAAIC,KAAK,GAAG,CAAC,CAAC;IAEd,KAAK,CAACJ,QAAQ,EAAEC,SAAS,CAAC;IAE1BI,IAAI,CAAC,IAAI,EAAE,OAAO,EAAEF,KAAK,CAAC;IAE1B,IAAI,OAAOD,IAAI,KAAK,QAAQ,EAAE;MAC5B,OAAO,EAAEE,KAAK,GAAGT,MAAM,CAACW,MAAM,EAAE;QAC9B,MAAMC,KAAK,GAAGZ,MAAM,CAACS,KAAK,CAAC;QAC3BC,IAAI,CAAC,IAAI,EAAEV,MAAM,CAACS,KAAK,CAAC,EAAE,CAACF,IAAI,GAAGR,KAAK,CAACa,KAAK,CAAC,MAAMb,KAAK,CAACa,KAAK,CAAC,CAAC;MACnE;IACF;EACF;AACF;AAEAT,WAAW,CAACU,SAAS,CAACC,OAAO,GAAG,IAAI;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASJ,IAAIA,CAACK,MAAM,EAAEC,GAAG,EAAEC,KAAK,EAAE;EAChC,IAAIA,KAAK,EAAE;IACTF,MAAM,CAACC,GAAG,CAAC,GAAGC,KAAK;EACrB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}