{"ast":null,"code":"export const qnaContent = `# MIT OOP Q&A\n\n## What is Object-Oriented Programming (OOP)?\nObject-Oriented Programming is a programming paradigm based on the concept of \"objects\", which can contain data and code: data in the form of fields (often known as attributes or properties), and code, in the form of procedures (often known as methods).\n\n## Key Concepts:\n- **Classes**: Templates/blueprints for creating objects\n- **Objects**: Instances of classes\n- **Inheritance**: A class can inherit properties and methods from another class\n- **Encapsulation**: Bundling of data and methods that operate on the data\n- **Polymorphism**: Ability to process objects differently depending on their data type or class\n\n## Common OOP Languages:\n- Python\n- Java\n- C++\n- Ruby\n- JavaScript\n\n## Best Practices:\n- Keep classes small and focused\n- Use inheritance wisely\n- Prefer composition over inheritance\n- Follow SOLID principles\n- Write unit tests for classes and methods`;","map":{"version":3,"names":["qnaContent"],"sources":["/home/striker/makeathon-2025/makeathon/src/qnaContent.js"],"sourcesContent":["export const qnaContent = `# MIT OOP Q&A\n\n## What is Object-Oriented Programming (OOP)?\nObject-Oriented Programming is a programming paradigm based on the concept of \"objects\", which can contain data and code: data in the form of fields (often known as attributes or properties), and code, in the form of procedures (often known as methods).\n\n## Key Concepts:\n- **Classes**: Templates/blueprints for creating objects\n- **Objects**: Instances of classes\n- **Inheritance**: A class can inherit properties and methods from another class\n- **Encapsulation**: Bundling of data and methods that operate on the data\n- **Polymorphism**: Ability to process objects differently depending on their data type or class\n\n## Common OOP Languages:\n- Python\n- Java\n- C++\n- Ruby\n- JavaScript\n\n## Best Practices:\n- Keep classes small and focused\n- Use inheritance wisely\n- Prefer composition over inheritance\n- Follow SOLID principles\n- Write unit tests for classes and methods`;\n"],"mappings":"AAAA,OAAO,MAAMA,UAAU,GAAG;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}