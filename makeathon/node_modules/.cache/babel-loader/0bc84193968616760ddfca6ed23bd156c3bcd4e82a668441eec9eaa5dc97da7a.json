{"ast":null,"code":"/**\r\n * @import {\r\n *   Code,\r\n *   InitialConstruct,\r\n *   Initializer,\r\n *   Resolver,\r\n *   State,\r\n *   TokenizeContext\r\n * } from 'micromark-util-types'\r\n */\n\nimport { ok as assert } from 'devlop';\nimport { codes, constants, types } from 'micromark-util-symbol';\nexport const resolver = {\n  resolveAll: createResolver()\n};\nexport const string = initializeFactory('string');\nexport const text = initializeFactory('text');\n\n/**\r\n * @param {'string' | 'text'} field\r\n *   Field.\r\n * @returns {InitialConstruct}\r\n *   Construct.\r\n */\nfunction initializeFactory(field) {\n  return {\n    resolveAll: createResolver(field === 'text' ? resolveAllLineSuffixes : undefined),\n    tokenize: initializeText\n  };\n\n  /**\r\n   * @this {TokenizeContext}\r\n   *   Context.\r\n   * @type {Initializer}\r\n   */\n  function initializeText(effects) {\n    const self = this;\n    const constructs = this.parser.constructs[field];\n    const text = effects.attempt(constructs, start, notText);\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code);\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === codes.eof) {\n        effects.consume(code);\n        return;\n      }\n      effects.enter(types.data);\n      effects.consume(code);\n      return data;\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit(types.data);\n        return text(code);\n      }\n\n      // Data.\n      effects.consume(code);\n      return data;\n    }\n\n    /**\r\n     * @param {Code} code\r\n     *   Code.\r\n     * @returns {boolean}\r\n     *   Whether the code is a break.\r\n     */\n    function atBreak(code) {\n      if (code === codes.eof) {\n        return true;\n      }\n      const list = constructs[code];\n      let index = -1;\n      if (list) {\n        // Always populated by defaults.\n        assert(Array.isArray(list), 'expected `disable.null` to be populated');\n        while (++index < list.length) {\n          const item = list[index];\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n  }\n}\n\n/**\r\n * @param {Resolver | undefined} [extraResolver]\r\n *   Resolver.\r\n * @returns {Resolver}\r\n *   Resolver.\r\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText;\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1;\n    /** @type {number | undefined} */\n    let enter;\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === types.data) {\n          enter = index;\n          index++;\n        }\n      } else if (!events[index] || events[index][1].type !== types.data) {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end;\n          events.splice(enter + 2, index - enter - 2);\n          index = enter + 2;\n        }\n        enter = undefined;\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events;\n  }\n}\n\n/**\r\n * A rather ugly set of instructions which again looks at chunks in the input\r\n * stream.\r\n * The reason to do this here is that it is *much* faster to parse in reverse.\r\n * And that we can’t hook into `null` to split the line suffix before an EOF.\r\n * To do: figure out if we can make this into a clean utility, or even in core.\r\n * As it will be useful for GFMs literal autolink extension (and maybe even\r\n * tables?)\r\n *\r\n * @type {Resolver}\r\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0; // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if ((eventIndex === events.length || events[eventIndex][1].type === types.lineEnding) && events[eventIndex - 1][1].type === types.data) {\n      const data = events[eventIndex - 1][1];\n      const chunks = context.sliceStream(data);\n      let index = chunks.length;\n      let bufferIndex = -1;\n      let size = 0;\n      /** @type {boolean | undefined} */\n      let tabs;\n      while (index--) {\n        const chunk = chunks[index];\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length;\n          while (chunk.charCodeAt(bufferIndex - 1) === codes.space) {\n            size++;\n            bufferIndex--;\n          }\n          if (bufferIndex) break;\n          bufferIndex = -1;\n        }\n        // Number\n        else if (chunk === codes.horizontalTab) {\n          tabs = true;\n          size++;\n        } else if (chunk === codes.virtualSpace) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++;\n          break;\n        }\n      }\n\n      // Allow final trailing whitespace.\n      if (context._contentTypeTextTrailing && eventIndex === events.length) {\n        size = 0;\n      }\n      if (size) {\n        const token = {\n          type: eventIndex === events.length || tabs || size < constants.hardBreakPrefixSizeMin ? types.lineSuffix : types.hardBreakTrailing,\n          start: {\n            _bufferIndex: index ? bufferIndex : data.start._bufferIndex + bufferIndex,\n            _index: data.start._index + index,\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size\n          },\n          end: {\n            ...data.end\n          }\n        };\n        data.end = {\n          ...token.start\n        };\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token);\n        } else {\n          events.splice(eventIndex, 0, ['enter', token, context], ['exit', token, context]);\n          eventIndex += 2;\n        }\n      }\n      eventIndex++;\n    }\n  }\n  return events;\n}","map":{"version":3,"names":["ok","assert","codes","constants","types","resolver","resolveAll","createResolver","string","initializeFactory","text","field","resolveAllLineSuffixes","undefined","tokenize","initializeText","effects","self","constructs","parser","attempt","start","notText","code","atBreak","eof","consume","enter","data","exit","list","index","Array","isArray","length","item","previous","call","extraResolver","resolveAllText","events","context","type","end","splice","eventIndex","lineEnding","chunks","sliceStream","bufferIndex","size","tabs","chunk","charCodeAt","space","horizontalTab","virtualSpace","_contentTypeTextTrailing","token","hardBreakPrefixSizeMin","lineSuffix","hardBreakTrailing","_bufferIndex","_index","line","column","offset","Object","assign"],"sources":["C:/Users/smart/Downloads/Final Project P20119/makeathon-2025/makeathon/node_modules/micromark/dev/lib/initialize/text.js"],"sourcesContent":["/**\r\n * @import {\r\n *   Code,\r\n *   InitialConstruct,\r\n *   Initializer,\r\n *   Resolver,\r\n *   State,\r\n *   TokenizeContext\r\n * } from 'micromark-util-types'\r\n */\r\n\r\nimport {ok as assert} from 'devlop'\r\nimport {codes, constants, types} from 'micromark-util-symbol'\r\n\r\nexport const resolver = {resolveAll: createResolver()}\r\nexport const string = initializeFactory('string')\r\nexport const text = initializeFactory('text')\r\n\r\n/**\r\n * @param {'string' | 'text'} field\r\n *   Field.\r\n * @returns {InitialConstruct}\r\n *   Construct.\r\n */\r\nfunction initializeFactory(field) {\r\n  return {\r\n    resolveAll: createResolver(\r\n      field === 'text' ? resolveAllLineSuffixes : undefined\r\n    ),\r\n    tokenize: initializeText\r\n  }\r\n\r\n  /**\r\n   * @this {TokenizeContext}\r\n   *   Context.\r\n   * @type {Initializer}\r\n   */\r\n  function initializeText(effects) {\r\n    const self = this\r\n    const constructs = this.parser.constructs[field]\r\n    const text = effects.attempt(constructs, start, notText)\r\n\r\n    return start\r\n\r\n    /** @type {State} */\r\n    function start(code) {\r\n      return atBreak(code) ? text(code) : notText(code)\r\n    }\r\n\r\n    /** @type {State} */\r\n    function notText(code) {\r\n      if (code === codes.eof) {\r\n        effects.consume(code)\r\n        return\r\n      }\r\n\r\n      effects.enter(types.data)\r\n      effects.consume(code)\r\n      return data\r\n    }\r\n\r\n    /** @type {State} */\r\n    function data(code) {\r\n      if (atBreak(code)) {\r\n        effects.exit(types.data)\r\n        return text(code)\r\n      }\r\n\r\n      // Data.\r\n      effects.consume(code)\r\n      return data\r\n    }\r\n\r\n    /**\r\n     * @param {Code} code\r\n     *   Code.\r\n     * @returns {boolean}\r\n     *   Whether the code is a break.\r\n     */\r\n    function atBreak(code) {\r\n      if (code === codes.eof) {\r\n        return true\r\n      }\r\n\r\n      const list = constructs[code]\r\n      let index = -1\r\n\r\n      if (list) {\r\n        // Always populated by defaults.\r\n        assert(Array.isArray(list), 'expected `disable.null` to be populated')\r\n\r\n        while (++index < list.length) {\r\n          const item = list[index]\r\n          if (!item.previous || item.previous.call(self, self.previous)) {\r\n            return true\r\n          }\r\n        }\r\n      }\r\n\r\n      return false\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Resolver | undefined} [extraResolver]\r\n *   Resolver.\r\n * @returns {Resolver}\r\n *   Resolver.\r\n */\r\nfunction createResolver(extraResolver) {\r\n  return resolveAllText\r\n\r\n  /** @type {Resolver} */\r\n  function resolveAllText(events, context) {\r\n    let index = -1\r\n    /** @type {number | undefined} */\r\n    let enter\r\n\r\n    // A rather boring computation (to merge adjacent `data` events) which\r\n    // improves mm performance by 29%.\r\n    while (++index <= events.length) {\r\n      if (enter === undefined) {\r\n        if (events[index] && events[index][1].type === types.data) {\r\n          enter = index\r\n          index++\r\n        }\r\n      } else if (!events[index] || events[index][1].type !== types.data) {\r\n        // Don’t do anything if there is one data token.\r\n        if (index !== enter + 2) {\r\n          events[enter][1].end = events[index - 1][1].end\r\n          events.splice(enter + 2, index - enter - 2)\r\n          index = enter + 2\r\n        }\r\n\r\n        enter = undefined\r\n      }\r\n    }\r\n\r\n    return extraResolver ? extraResolver(events, context) : events\r\n  }\r\n}\r\n\r\n/**\r\n * A rather ugly set of instructions which again looks at chunks in the input\r\n * stream.\r\n * The reason to do this here is that it is *much* faster to parse in reverse.\r\n * And that we can’t hook into `null` to split the line suffix before an EOF.\r\n * To do: figure out if we can make this into a clean utility, or even in core.\r\n * As it will be useful for GFMs literal autolink extension (and maybe even\r\n * tables?)\r\n *\r\n * @type {Resolver}\r\n */\r\nfunction resolveAllLineSuffixes(events, context) {\r\n  let eventIndex = 0 // Skip first.\r\n\r\n  while (++eventIndex <= events.length) {\r\n    if (\r\n      (eventIndex === events.length ||\r\n        events[eventIndex][1].type === types.lineEnding) &&\r\n      events[eventIndex - 1][1].type === types.data\r\n    ) {\r\n      const data = events[eventIndex - 1][1]\r\n      const chunks = context.sliceStream(data)\r\n      let index = chunks.length\r\n      let bufferIndex = -1\r\n      let size = 0\r\n      /** @type {boolean | undefined} */\r\n      let tabs\r\n\r\n      while (index--) {\r\n        const chunk = chunks[index]\r\n\r\n        if (typeof chunk === 'string') {\r\n          bufferIndex = chunk.length\r\n\r\n          while (chunk.charCodeAt(bufferIndex - 1) === codes.space) {\r\n            size++\r\n            bufferIndex--\r\n          }\r\n\r\n          if (bufferIndex) break\r\n          bufferIndex = -1\r\n        }\r\n        // Number\r\n        else if (chunk === codes.horizontalTab) {\r\n          tabs = true\r\n          size++\r\n        } else if (chunk === codes.virtualSpace) {\r\n          // Empty\r\n        } else {\r\n          // Replacement character, exit.\r\n          index++\r\n          break\r\n        }\r\n      }\r\n\r\n      // Allow final trailing whitespace.\r\n      if (context._contentTypeTextTrailing && eventIndex === events.length) {\r\n        size = 0\r\n      }\r\n\r\n      if (size) {\r\n        const token = {\r\n          type:\r\n            eventIndex === events.length ||\r\n            tabs ||\r\n            size < constants.hardBreakPrefixSizeMin\r\n              ? types.lineSuffix\r\n              : types.hardBreakTrailing,\r\n          start: {\r\n            _bufferIndex: index\r\n              ? bufferIndex\r\n              : data.start._bufferIndex + bufferIndex,\r\n            _index: data.start._index + index,\r\n            line: data.end.line,\r\n            column: data.end.column - size,\r\n            offset: data.end.offset - size\r\n          },\r\n          end: {...data.end}\r\n        }\r\n\r\n        data.end = {...token.start}\r\n\r\n        if (data.start.offset === data.end.offset) {\r\n          Object.assign(data, token)\r\n        } else {\r\n          events.splice(\r\n            eventIndex,\r\n            0,\r\n            ['enter', token, context],\r\n            ['exit', token, context]\r\n          )\r\n          eventIndex += 2\r\n        }\r\n      }\r\n\r\n      eventIndex++\r\n    }\r\n  }\r\n\r\n  return events\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,EAAE,IAAIC,MAAM,QAAO,QAAQ;AACnC,SAAQC,KAAK,EAAEC,SAAS,EAAEC,KAAK,QAAO,uBAAuB;AAE7D,OAAO,MAAMC,QAAQ,GAAG;EAACC,UAAU,EAAEC,cAAc,CAAC;AAAC,CAAC;AACtD,OAAO,MAAMC,MAAM,GAAGC,iBAAiB,CAAC,QAAQ,CAAC;AACjD,OAAO,MAAMC,IAAI,GAAGD,iBAAiB,CAAC,MAAM,CAAC;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,iBAAiBA,CAACE,KAAK,EAAE;EAChC,OAAO;IACLL,UAAU,EAAEC,cAAc,CACxBI,KAAK,KAAK,MAAM,GAAGC,sBAAsB,GAAGC,SAC9C,CAAC;IACDC,QAAQ,EAAEC;EACZ,CAAC;;EAED;AACF;AACA;AACA;AACA;EACE,SAASA,cAAcA,CAACC,OAAO,EAAE;IAC/B,MAAMC,IAAI,GAAG,IAAI;IACjB,MAAMC,UAAU,GAAG,IAAI,CAACC,MAAM,CAACD,UAAU,CAACP,KAAK,CAAC;IAChD,MAAMD,IAAI,GAAGM,OAAO,CAACI,OAAO,CAACF,UAAU,EAAEG,KAAK,EAAEC,OAAO,CAAC;IAExD,OAAOD,KAAK;;IAEZ;IACA,SAASA,KAAKA,CAACE,IAAI,EAAE;MACnB,OAAOC,OAAO,CAACD,IAAI,CAAC,GAAGb,IAAI,CAACa,IAAI,CAAC,GAAGD,OAAO,CAACC,IAAI,CAAC;IACnD;;IAEA;IACA,SAASD,OAAOA,CAACC,IAAI,EAAE;MACrB,IAAIA,IAAI,KAAKrB,KAAK,CAACuB,GAAG,EAAE;QACtBT,OAAO,CAACU,OAAO,CAACH,IAAI,CAAC;QACrB;MACF;MAEAP,OAAO,CAACW,KAAK,CAACvB,KAAK,CAACwB,IAAI,CAAC;MACzBZ,OAAO,CAACU,OAAO,CAACH,IAAI,CAAC;MACrB,OAAOK,IAAI;IACb;;IAEA;IACA,SAASA,IAAIA,CAACL,IAAI,EAAE;MAClB,IAAIC,OAAO,CAACD,IAAI,CAAC,EAAE;QACjBP,OAAO,CAACa,IAAI,CAACzB,KAAK,CAACwB,IAAI,CAAC;QACxB,OAAOlB,IAAI,CAACa,IAAI,CAAC;MACnB;;MAEA;MACAP,OAAO,CAACU,OAAO,CAACH,IAAI,CAAC;MACrB,OAAOK,IAAI;IACb;;IAEA;AACJ;AACA;AACA;AACA;AACA;IACI,SAASJ,OAAOA,CAACD,IAAI,EAAE;MACrB,IAAIA,IAAI,KAAKrB,KAAK,CAACuB,GAAG,EAAE;QACtB,OAAO,IAAI;MACb;MAEA,MAAMK,IAAI,GAAGZ,UAAU,CAACK,IAAI,CAAC;MAC7B,IAAIQ,KAAK,GAAG,CAAC,CAAC;MAEd,IAAID,IAAI,EAAE;QACR;QACA7B,MAAM,CAAC+B,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,EAAE,yCAAyC,CAAC;QAEtE,OAAO,EAAEC,KAAK,GAAGD,IAAI,CAACI,MAAM,EAAE;UAC5B,MAAMC,IAAI,GAAGL,IAAI,CAACC,KAAK,CAAC;UACxB,IAAI,CAACI,IAAI,CAACC,QAAQ,IAAID,IAAI,CAACC,QAAQ,CAACC,IAAI,CAACpB,IAAI,EAAEA,IAAI,CAACmB,QAAQ,CAAC,EAAE;YAC7D,OAAO,IAAI;UACb;QACF;MACF;MAEA,OAAO,KAAK;IACd;EACF;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS7B,cAAcA,CAAC+B,aAAa,EAAE;EACrC,OAAOC,cAAc;;EAErB;EACA,SAASA,cAAcA,CAACC,MAAM,EAAEC,OAAO,EAAE;IACvC,IAAIV,KAAK,GAAG,CAAC,CAAC;IACd;IACA,IAAIJ,KAAK;;IAET;IACA;IACA,OAAO,EAAEI,KAAK,IAAIS,MAAM,CAACN,MAAM,EAAE;MAC/B,IAAIP,KAAK,KAAKd,SAAS,EAAE;QACvB,IAAI2B,MAAM,CAACT,KAAK,CAAC,IAAIS,MAAM,CAACT,KAAK,CAAC,CAAC,CAAC,CAAC,CAACW,IAAI,KAAKtC,KAAK,CAACwB,IAAI,EAAE;UACzDD,KAAK,GAAGI,KAAK;UACbA,KAAK,EAAE;QACT;MACF,CAAC,MAAM,IAAI,CAACS,MAAM,CAACT,KAAK,CAAC,IAAIS,MAAM,CAACT,KAAK,CAAC,CAAC,CAAC,CAAC,CAACW,IAAI,KAAKtC,KAAK,CAACwB,IAAI,EAAE;QACjE;QACA,IAAIG,KAAK,KAAKJ,KAAK,GAAG,CAAC,EAAE;UACvBa,MAAM,CAACb,KAAK,CAAC,CAAC,CAAC,CAAC,CAACgB,GAAG,GAAGH,MAAM,CAACT,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAACY,GAAG;UAC/CH,MAAM,CAACI,MAAM,CAACjB,KAAK,GAAG,CAAC,EAAEI,KAAK,GAAGJ,KAAK,GAAG,CAAC,CAAC;UAC3CI,KAAK,GAAGJ,KAAK,GAAG,CAAC;QACnB;QAEAA,KAAK,GAAGd,SAAS;MACnB;IACF;IAEA,OAAOyB,aAAa,GAAGA,aAAa,CAACE,MAAM,EAAEC,OAAO,CAAC,GAAGD,MAAM;EAChE;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS5B,sBAAsBA,CAAC4B,MAAM,EAAEC,OAAO,EAAE;EAC/C,IAAII,UAAU,GAAG,CAAC,EAAC;;EAEnB,OAAO,EAAEA,UAAU,IAAIL,MAAM,CAACN,MAAM,EAAE;IACpC,IACE,CAACW,UAAU,KAAKL,MAAM,CAACN,MAAM,IAC3BM,MAAM,CAACK,UAAU,CAAC,CAAC,CAAC,CAAC,CAACH,IAAI,KAAKtC,KAAK,CAAC0C,UAAU,KACjDN,MAAM,CAACK,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAACH,IAAI,KAAKtC,KAAK,CAACwB,IAAI,EAC7C;MACA,MAAMA,IAAI,GAAGY,MAAM,CAACK,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;MACtC,MAAME,MAAM,GAAGN,OAAO,CAACO,WAAW,CAACpB,IAAI,CAAC;MACxC,IAAIG,KAAK,GAAGgB,MAAM,CAACb,MAAM;MACzB,IAAIe,WAAW,GAAG,CAAC,CAAC;MACpB,IAAIC,IAAI,GAAG,CAAC;MACZ;MACA,IAAIC,IAAI;MAER,OAAOpB,KAAK,EAAE,EAAE;QACd,MAAMqB,KAAK,GAAGL,MAAM,CAAChB,KAAK,CAAC;QAE3B,IAAI,OAAOqB,KAAK,KAAK,QAAQ,EAAE;UAC7BH,WAAW,GAAGG,KAAK,CAAClB,MAAM;UAE1B,OAAOkB,KAAK,CAACC,UAAU,CAACJ,WAAW,GAAG,CAAC,CAAC,KAAK/C,KAAK,CAACoD,KAAK,EAAE;YACxDJ,IAAI,EAAE;YACND,WAAW,EAAE;UACf;UAEA,IAAIA,WAAW,EAAE;UACjBA,WAAW,GAAG,CAAC,CAAC;QAClB;QACA;QAAA,KACK,IAAIG,KAAK,KAAKlD,KAAK,CAACqD,aAAa,EAAE;UACtCJ,IAAI,GAAG,IAAI;UACXD,IAAI,EAAE;QACR,CAAC,MAAM,IAAIE,KAAK,KAAKlD,KAAK,CAACsD,YAAY,EAAE;UACvC;QAAA,CACD,MAAM;UACL;UACAzB,KAAK,EAAE;UACP;QACF;MACF;;MAEA;MACA,IAAIU,OAAO,CAACgB,wBAAwB,IAAIZ,UAAU,KAAKL,MAAM,CAACN,MAAM,EAAE;QACpEgB,IAAI,GAAG,CAAC;MACV;MAEA,IAAIA,IAAI,EAAE;QACR,MAAMQ,KAAK,GAAG;UACZhB,IAAI,EACFG,UAAU,KAAKL,MAAM,CAACN,MAAM,IAC5BiB,IAAI,IACJD,IAAI,GAAG/C,SAAS,CAACwD,sBAAsB,GACnCvD,KAAK,CAACwD,UAAU,GAChBxD,KAAK,CAACyD,iBAAiB;UAC7BxC,KAAK,EAAE;YACLyC,YAAY,EAAE/B,KAAK,GACfkB,WAAW,GACXrB,IAAI,CAACP,KAAK,CAACyC,YAAY,GAAGb,WAAW;YACzCc,MAAM,EAAEnC,IAAI,CAACP,KAAK,CAAC0C,MAAM,GAAGhC,KAAK;YACjCiC,IAAI,EAAEpC,IAAI,CAACe,GAAG,CAACqB,IAAI;YACnBC,MAAM,EAAErC,IAAI,CAACe,GAAG,CAACsB,MAAM,GAAGf,IAAI;YAC9BgB,MAAM,EAAEtC,IAAI,CAACe,GAAG,CAACuB,MAAM,GAAGhB;UAC5B,CAAC;UACDP,GAAG,EAAE;YAAC,GAAGf,IAAI,CAACe;UAAG;QACnB,CAAC;QAEDf,IAAI,CAACe,GAAG,GAAG;UAAC,GAAGe,KAAK,CAACrC;QAAK,CAAC;QAE3B,IAAIO,IAAI,CAACP,KAAK,CAAC6C,MAAM,KAAKtC,IAAI,CAACe,GAAG,CAACuB,MAAM,EAAE;UACzCC,MAAM,CAACC,MAAM,CAACxC,IAAI,EAAE8B,KAAK,CAAC;QAC5B,CAAC,MAAM;UACLlB,MAAM,CAACI,MAAM,CACXC,UAAU,EACV,CAAC,EACD,CAAC,OAAO,EAAEa,KAAK,EAAEjB,OAAO,CAAC,EACzB,CAAC,MAAM,EAAEiB,KAAK,EAAEjB,OAAO,CACzB,CAAC;UACDI,UAAU,IAAI,CAAC;QACjB;MACF;MAEAA,UAAU,EAAE;IACd;EACF;EAEA,OAAOL,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}