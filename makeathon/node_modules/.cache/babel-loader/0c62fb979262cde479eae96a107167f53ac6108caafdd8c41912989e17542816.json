{"ast":null,"code":"export const quizContent = `# MIT OOP Quiz\n\n**Instructions:** Choose the *best* answer for each question.\n\n**Question 1:**\n\nWhich of the following is NOT a characteristic of an object in Python?\n\na)  A type\nb)  An internal data representation\nc)  A set of procedures for interaction\nd)  A physical manifestation in hardware.\n\n**Question 2:**\n\nWhat is the primary purpose of the \\`\\`\\`__init__\\`\\`\\` method in a Python class?\n\na)  To define the class's attributes.\nb)  To create a string representation of the object.\nc)  To initialize the object's data attributes when an instance is created.\nd)  To define the class's methods.\n\n**Question 3:**\n\nWhat is the significance of the \\`self\\` parameter in a Python method?\n\na)  It refers to the class itself.\nb)  It refers to the instance of the class on which the method is being called.\nc)  It's a placeholder and can be named anything.\nd)  It's only used in the \\`\\`\\`__init__\\`\\`\\` method.\n\n**Question 4:**\n\nWhich of the following best describes the concept of data abstraction in OOP?\n\na)  Making all data attributes public.\nb)  Hiding the internal representation of an object and providing a well-defined interface for interaction.\nc)  Creating complex data structures.\nd)  Using only primitive data types.\n\n**Question 5:**\n\nWhat is \"garbage collection\" in Python?\n\na)  A process for sorting data within an object.\nb)  The automatic reclamation of memory occupied by objects that are no longer accessible.\nc)  A method for deleting files from the hard drive.\nd)  A manual process that the programmer must explicitly trigger.\n\n**Question 6:**\n\nWhat is the benefit of bundling data and procedures into classes in OOP?\n\na)  It makes the code run faster.\nb)  It reduces the need for comments.\nc)  It enforces a specific coding style.\nd)  It organizes related data and behaviors, promoting modularity and reusability.\n\n**Question 7:**\n\nWhich of the following statement about the difference of creating a class and using an instance of the class is most accurate?\n\na) Creating a class involves defining class attributes, while using a class involves creating new instances of objects.\nb) Creating a class involves creating new instances of objects, while using a class involves defining class attributes.\nc) Creating a class and using a class are the same.\nd) Creating a class is not necessary in OOP.\n\n**Answer Key:**\n\n1.  **d) A physical manifestation in hardware.** (Objects are conceptual, not physical hardware.)\n2.  **c) To initialize the object's data attributes when an instance is created.** (The constructor.)\n3.  **b) It refers to the instance of the class on which the method is being called.** (It's the way the object refers to itself.)\n4.  **b) Hiding the internal representation of an object and providing a well-defined interface for interaction.** (This is the core of abstraction.)\n5.  **b) The automatic reclamation of memory occupied by objects that are no longer accessible.** (Important for memory management.)\n6.  **d) It organizes related data and behaviors, promoting modularity and reusability.**\n7.  **a) Creating a class involves defining class attributes, while using a class involves creating new instances of objects.**`;","map":{"version":3,"names":["quizContent"],"sources":["/home/striker/makeathon-2025/makeathon/src/quizContent.js"],"sourcesContent":["export const quizContent = `# MIT OOP Quiz\n\n**Instructions:** Choose the *best* answer for each question.\n\n**Question 1:**\n\nWhich of the following is NOT a characteristic of an object in Python?\n\na)  A type\nb)  An internal data representation\nc)  A set of procedures for interaction\nd)  A physical manifestation in hardware.\n\n**Question 2:**\n\nWhat is the primary purpose of the \\`\\`\\`__init__\\`\\`\\` method in a Python class?\n\na)  To define the class's attributes.\nb)  To create a string representation of the object.\nc)  To initialize the object's data attributes when an instance is created.\nd)  To define the class's methods.\n\n**Question 3:**\n\nWhat is the significance of the \\`self\\` parameter in a Python method?\n\na)  It refers to the class itself.\nb)  It refers to the instance of the class on which the method is being called.\nc)  It's a placeholder and can be named anything.\nd)  It's only used in the \\`\\`\\`__init__\\`\\`\\` method.\n\n**Question 4:**\n\nWhich of the following best describes the concept of data abstraction in OOP?\n\na)  Making all data attributes public.\nb)  Hiding the internal representation of an object and providing a well-defined interface for interaction.\nc)  Creating complex data structures.\nd)  Using only primitive data types.\n\n**Question 5:**\n\nWhat is \"garbage collection\" in Python?\n\na)  A process for sorting data within an object.\nb)  The automatic reclamation of memory occupied by objects that are no longer accessible.\nc)  A method for deleting files from the hard drive.\nd)  A manual process that the programmer must explicitly trigger.\n\n**Question 6:**\n\nWhat is the benefit of bundling data and procedures into classes in OOP?\n\na)  It makes the code run faster.\nb)  It reduces the need for comments.\nc)  It enforces a specific coding style.\nd)  It organizes related data and behaviors, promoting modularity and reusability.\n\n**Question 7:**\n\nWhich of the following statement about the difference of creating a class and using an instance of the class is most accurate?\n\na) Creating a class involves defining class attributes, while using a class involves creating new instances of objects.\nb) Creating a class involves creating new instances of objects, while using a class involves defining class attributes.\nc) Creating a class and using a class are the same.\nd) Creating a class is not necessary in OOP.\n\n**Answer Key:**\n\n1.  **d) A physical manifestation in hardware.** (Objects are conceptual, not physical hardware.)\n2.  **c) To initialize the object's data attributes when an instance is created.** (The constructor.)\n3.  **b) It refers to the instance of the class on which the method is being called.** (It's the way the object refers to itself.)\n4.  **b) Hiding the internal representation of an object and providing a well-defined interface for interaction.** (This is the core of abstraction.)\n5.  **b) The automatic reclamation of memory occupied by objects that are no longer accessible.** (Important for memory management.)\n6.  **d) It organizes related data and behaviors, promoting modularity and reusability.**\n7.  **a) Creating a class involves defining class attributes, while using a class involves creating new instances of objects.**`;\n"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAG;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gIAAgI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}