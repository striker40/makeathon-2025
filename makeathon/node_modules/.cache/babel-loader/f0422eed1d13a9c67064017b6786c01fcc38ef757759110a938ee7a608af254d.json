{"ast":null,"code":"import { htmlDecodeTree } from \"./generated/decode-data-html.js\";\nimport { xmlDecodeTree } from \"./generated/decode-data-xml.js\";\nimport { replaceCodePoint, fromCodePoint } from \"./decode-codepoint.js\";\nvar CharCodes;\n(function (CharCodes) {\n  CharCodes[CharCodes[\"NUM\"] = 35] = \"NUM\";\n  CharCodes[CharCodes[\"SEMI\"] = 59] = \"SEMI\";\n  CharCodes[CharCodes[\"EQUALS\"] = 61] = \"EQUALS\";\n  CharCodes[CharCodes[\"ZERO\"] = 48] = \"ZERO\";\n  CharCodes[CharCodes[\"NINE\"] = 57] = \"NINE\";\n  CharCodes[CharCodes[\"LOWER_A\"] = 97] = \"LOWER_A\";\n  CharCodes[CharCodes[\"LOWER_F\"] = 102] = \"LOWER_F\";\n  CharCodes[CharCodes[\"LOWER_X\"] = 120] = \"LOWER_X\";\n  CharCodes[CharCodes[\"LOWER_Z\"] = 122] = \"LOWER_Z\";\n  CharCodes[CharCodes[\"UPPER_A\"] = 65] = \"UPPER_A\";\n  CharCodes[CharCodes[\"UPPER_F\"] = 70] = \"UPPER_F\";\n  CharCodes[CharCodes[\"UPPER_Z\"] = 90] = \"UPPER_Z\";\n})(CharCodes || (CharCodes = {}));\n/** Bit that needs to be set to convert an upper case ASCII character to lower case */\nconst TO_LOWER_BIT = 32;\nexport var BinTrieFlags;\n(function (BinTrieFlags) {\n  BinTrieFlags[BinTrieFlags[\"VALUE_LENGTH\"] = 49152] = \"VALUE_LENGTH\";\n  BinTrieFlags[BinTrieFlags[\"BRANCH_LENGTH\"] = 16256] = \"BRANCH_LENGTH\";\n  BinTrieFlags[BinTrieFlags[\"JUMP_TABLE\"] = 127] = \"JUMP_TABLE\";\n})(BinTrieFlags || (BinTrieFlags = {}));\nfunction isNumber(code) {\n  return code >= CharCodes.ZERO && code <= CharCodes.NINE;\n}\nfunction isHexadecimalCharacter(code) {\n  return code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_F || code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_F;\n}\nfunction isAsciiAlphaNumeric(code) {\n  return code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_Z || code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_Z || isNumber(code);\n}\n/**\r\n * Checks if the given character is a valid end character for an entity in an attribute.\r\n *\r\n * Attribute values that aren't terminated properly aren't parsed, and shouldn't lead to a parser error.\r\n * See the example in https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state\r\n */\nfunction isEntityInAttributeInvalidEnd(code) {\n  return code === CharCodes.EQUALS || isAsciiAlphaNumeric(code);\n}\nvar EntityDecoderState;\n(function (EntityDecoderState) {\n  EntityDecoderState[EntityDecoderState[\"EntityStart\"] = 0] = \"EntityStart\";\n  EntityDecoderState[EntityDecoderState[\"NumericStart\"] = 1] = \"NumericStart\";\n  EntityDecoderState[EntityDecoderState[\"NumericDecimal\"] = 2] = \"NumericDecimal\";\n  EntityDecoderState[EntityDecoderState[\"NumericHex\"] = 3] = \"NumericHex\";\n  EntityDecoderState[EntityDecoderState[\"NamedEntity\"] = 4] = \"NamedEntity\";\n})(EntityDecoderState || (EntityDecoderState = {}));\nexport var DecodingMode;\n(function (DecodingMode) {\n  /** Entities in text nodes that can end with any character. */\n  DecodingMode[DecodingMode[\"Legacy\"] = 0] = \"Legacy\";\n  /** Only allow entities terminated with a semicolon. */\n  DecodingMode[DecodingMode[\"Strict\"] = 1] = \"Strict\";\n  /** Entities in attributes have limitations on ending characters. */\n  DecodingMode[DecodingMode[\"Attribute\"] = 2] = \"Attribute\";\n})(DecodingMode || (DecodingMode = {}));\n/**\r\n * Token decoder with support of writing partial entities.\r\n */\nexport class EntityDecoder {\n  constructor(/** The tree used to decode entities. */\n  decodeTree,\n  /**\r\n   * The function that is called when a codepoint is decoded.\r\n   *\r\n   * For multi-byte named entities, this will be called multiple times,\r\n   * with the second codepoint, and the same `consumed` value.\r\n   *\r\n   * @param codepoint The decoded codepoint.\r\n   * @param consumed The number of bytes consumed by the decoder.\r\n   */\n  emitCodePoint, /** An object that is used to produce errors. */\n  errors) {\n    this.decodeTree = decodeTree;\n    this.emitCodePoint = emitCodePoint;\n    this.errors = errors;\n    /** The current state of the decoder. */\n    this.state = EntityDecoderState.EntityStart;\n    /** Characters that were consumed while parsing an entity. */\n    this.consumed = 1;\n    /**\r\n     * The result of the entity.\r\n     *\r\n     * Either the result index of a numeric entity, or the codepoint of a\r\n     * numeric entity.\r\n     */\n    this.result = 0;\n    /** The current index in the decode tree. */\n    this.treeIndex = 0;\n    /** The number of characters that were consumed in excess. */\n    this.excess = 1;\n    /** The mode in which the decoder is operating. */\n    this.decodeMode = DecodingMode.Strict;\n  }\n  /** Resets the instance to make it reusable. */\n  startEntity(decodeMode) {\n    this.decodeMode = decodeMode;\n    this.state = EntityDecoderState.EntityStart;\n    this.result = 0;\n    this.treeIndex = 0;\n    this.excess = 1;\n    this.consumed = 1;\n  }\n  /**\r\n   * Write an entity to the decoder. This can be called multiple times with partial entities.\r\n   * If the entity is incomplete, the decoder will return -1.\r\n   *\r\n   * Mirrors the implementation of `getDecoder`, but with the ability to stop decoding if the\r\n   * entity is incomplete, and resume when the next string is written.\r\n   *\r\n   * @param input The string containing the entity (or a continuation of the entity).\r\n   * @param offset The offset at which the entity begins. Should be 0 if this is not the first call.\r\n   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\r\n   */\n  write(input, offset) {\n    switch (this.state) {\n      case EntityDecoderState.EntityStart:\n        {\n          if (input.charCodeAt(offset) === CharCodes.NUM) {\n            this.state = EntityDecoderState.NumericStart;\n            this.consumed += 1;\n            return this.stateNumericStart(input, offset + 1);\n          }\n          this.state = EntityDecoderState.NamedEntity;\n          return this.stateNamedEntity(input, offset);\n        }\n      case EntityDecoderState.NumericStart:\n        {\n          return this.stateNumericStart(input, offset);\n        }\n      case EntityDecoderState.NumericDecimal:\n        {\n          return this.stateNumericDecimal(input, offset);\n        }\n      case EntityDecoderState.NumericHex:\n        {\n          return this.stateNumericHex(input, offset);\n        }\n      case EntityDecoderState.NamedEntity:\n        {\n          return this.stateNamedEntity(input, offset);\n        }\n    }\n  }\n  /**\r\n   * Switches between the numeric decimal and hexadecimal states.\r\n   *\r\n   * Equivalent to the `Numeric character reference state` in the HTML spec.\r\n   *\r\n   * @param input The string containing the entity (or a continuation of the entity).\r\n   * @param offset The current offset.\r\n   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\r\n   */\n  stateNumericStart(input, offset) {\n    if (offset >= input.length) {\n      return -1;\n    }\n    if ((input.charCodeAt(offset) | TO_LOWER_BIT) === CharCodes.LOWER_X) {\n      this.state = EntityDecoderState.NumericHex;\n      this.consumed += 1;\n      return this.stateNumericHex(input, offset + 1);\n    }\n    this.state = EntityDecoderState.NumericDecimal;\n    return this.stateNumericDecimal(input, offset);\n  }\n  addToNumericResult(input, start, end, base) {\n    if (start !== end) {\n      const digitCount = end - start;\n      this.result = this.result * Math.pow(base, digitCount) + Number.parseInt(input.substr(start, digitCount), base);\n      this.consumed += digitCount;\n    }\n  }\n  /**\r\n   * Parses a hexadecimal numeric entity.\r\n   *\r\n   * Equivalent to the `Hexademical character reference state` in the HTML spec.\r\n   *\r\n   * @param input The string containing the entity (or a continuation of the entity).\r\n   * @param offset The current offset.\r\n   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\r\n   */\n  stateNumericHex(input, offset) {\n    const startIndex = offset;\n    while (offset < input.length) {\n      const char = input.charCodeAt(offset);\n      if (isNumber(char) || isHexadecimalCharacter(char)) {\n        offset += 1;\n      } else {\n        this.addToNumericResult(input, startIndex, offset, 16);\n        return this.emitNumericEntity(char, 3);\n      }\n    }\n    this.addToNumericResult(input, startIndex, offset, 16);\n    return -1;\n  }\n  /**\r\n   * Parses a decimal numeric entity.\r\n   *\r\n   * Equivalent to the `Decimal character reference state` in the HTML spec.\r\n   *\r\n   * @param input The string containing the entity (or a continuation of the entity).\r\n   * @param offset The current offset.\r\n   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\r\n   */\n  stateNumericDecimal(input, offset) {\n    const startIndex = offset;\n    while (offset < input.length) {\n      const char = input.charCodeAt(offset);\n      if (isNumber(char)) {\n        offset += 1;\n      } else {\n        this.addToNumericResult(input, startIndex, offset, 10);\n        return this.emitNumericEntity(char, 2);\n      }\n    }\n    this.addToNumericResult(input, startIndex, offset, 10);\n    return -1;\n  }\n  /**\r\n   * Validate and emit a numeric entity.\r\n   *\r\n   * Implements the logic from the `Hexademical character reference start\r\n   * state` and `Numeric character reference end state` in the HTML spec.\r\n   *\r\n   * @param lastCp The last code point of the entity. Used to see if the\r\n   *               entity was terminated with a semicolon.\r\n   * @param expectedLength The minimum number of characters that should be\r\n   *                       consumed. Used to validate that at least one digit\r\n   *                       was consumed.\r\n   * @returns The number of characters that were consumed.\r\n   */\n  emitNumericEntity(lastCp, expectedLength) {\n    var _a;\n    // Ensure we consumed at least one digit.\n    if (this.consumed <= expectedLength) {\n      (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);\n      return 0;\n    }\n    // Figure out if this is a legit end of the entity\n    if (lastCp === CharCodes.SEMI) {\n      this.consumed += 1;\n    } else if (this.decodeMode === DecodingMode.Strict) {\n      return 0;\n    }\n    this.emitCodePoint(replaceCodePoint(this.result), this.consumed);\n    if (this.errors) {\n      if (lastCp !== CharCodes.SEMI) {\n        this.errors.missingSemicolonAfterCharacterReference();\n      }\n      this.errors.validateNumericCharacterReference(this.result);\n    }\n    return this.consumed;\n  }\n  /**\r\n   * Parses a named entity.\r\n   *\r\n   * Equivalent to the `Named character reference state` in the HTML spec.\r\n   *\r\n   * @param input The string containing the entity (or a continuation of the entity).\r\n   * @param offset The current offset.\r\n   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\r\n   */\n  stateNamedEntity(input, offset) {\n    const {\n      decodeTree\n    } = this;\n    let current = decodeTree[this.treeIndex];\n    // The mask is the number of bytes of the value, including the current byte.\n    let valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;\n    for (; offset < input.length; offset++, this.excess++) {\n      const char = input.charCodeAt(offset);\n      this.treeIndex = determineBranch(decodeTree, current, this.treeIndex + Math.max(1, valueLength), char);\n      if (this.treeIndex < 0) {\n        return this.result === 0 ||\n        // If we are parsing an attribute\n        this.decodeMode === DecodingMode.Attribute && (\n        // We shouldn't have consumed any characters after the entity,\n        valueLength === 0 ||\n        // And there should be no invalid characters.\n        isEntityInAttributeInvalidEnd(char)) ? 0 : this.emitNotTerminatedNamedEntity();\n      }\n      current = decodeTree[this.treeIndex];\n      valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;\n      // If the branch is a value, store it and continue\n      if (valueLength !== 0) {\n        // If the entity is terminated by a semicolon, we are done.\n        if (char === CharCodes.SEMI) {\n          return this.emitNamedEntityData(this.treeIndex, valueLength, this.consumed + this.excess);\n        }\n        // If we encounter a non-terminated (legacy) entity while parsing strictly, then ignore it.\n        if (this.decodeMode !== DecodingMode.Strict) {\n          this.result = this.treeIndex;\n          this.consumed += this.excess;\n          this.excess = 0;\n        }\n      }\n    }\n    return -1;\n  }\n  /**\r\n   * Emit a named entity that was not terminated with a semicolon.\r\n   *\r\n   * @returns The number of characters consumed.\r\n   */\n  emitNotTerminatedNamedEntity() {\n    var _a;\n    const {\n      result,\n      decodeTree\n    } = this;\n    const valueLength = (decodeTree[result] & BinTrieFlags.VALUE_LENGTH) >> 14;\n    this.emitNamedEntityData(result, valueLength, this.consumed);\n    (_a = this.errors) === null || _a === void 0 ? void 0 : _a.missingSemicolonAfterCharacterReference();\n    return this.consumed;\n  }\n  /**\r\n   * Emit a named entity.\r\n   *\r\n   * @param result The index of the entity in the decode tree.\r\n   * @param valueLength The number of bytes in the entity.\r\n   * @param consumed The number of characters consumed.\r\n   *\r\n   * @returns The number of characters consumed.\r\n   */\n  emitNamedEntityData(result, valueLength, consumed) {\n    const {\n      decodeTree\n    } = this;\n    this.emitCodePoint(valueLength === 1 ? decodeTree[result] & ~BinTrieFlags.VALUE_LENGTH : decodeTree[result + 1], consumed);\n    if (valueLength === 3) {\n      // For multi-byte values, we need to emit the second byte.\n      this.emitCodePoint(decodeTree[result + 2], consumed);\n    }\n    return consumed;\n  }\n  /**\r\n   * Signal to the parser that the end of the input was reached.\r\n   *\r\n   * Remaining data will be emitted and relevant errors will be produced.\r\n   *\r\n   * @returns The number of characters consumed.\r\n   */\n  end() {\n    var _a;\n    switch (this.state) {\n      case EntityDecoderState.NamedEntity:\n        {\n          // Emit a named entity if we have one.\n          return this.result !== 0 && (this.decodeMode !== DecodingMode.Attribute || this.result === this.treeIndex) ? this.emitNotTerminatedNamedEntity() : 0;\n        }\n      // Otherwise, emit a numeric entity if we have one.\n      case EntityDecoderState.NumericDecimal:\n        {\n          return this.emitNumericEntity(0, 2);\n        }\n      case EntityDecoderState.NumericHex:\n        {\n          return this.emitNumericEntity(0, 3);\n        }\n      case EntityDecoderState.NumericStart:\n        {\n          (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);\n          return 0;\n        }\n      case EntityDecoderState.EntityStart:\n        {\n          // Return 0 if we have no entity.\n          return 0;\n        }\n    }\n  }\n}\n/**\r\n * Creates a function that decodes entities in a string.\r\n *\r\n * @param decodeTree The decode tree.\r\n * @returns A function that decodes entities in a string.\r\n */\nfunction getDecoder(decodeTree) {\n  let returnValue = \"\";\n  const decoder = new EntityDecoder(decodeTree, data => returnValue += fromCodePoint(data));\n  return function decodeWithTrie(input, decodeMode) {\n    let lastIndex = 0;\n    let offset = 0;\n    while ((offset = input.indexOf(\"&\", offset)) >= 0) {\n      returnValue += input.slice(lastIndex, offset);\n      decoder.startEntity(decodeMode);\n      const length = decoder.write(input,\n      // Skip the \"&\"\n      offset + 1);\n      if (length < 0) {\n        lastIndex = offset + decoder.end();\n        break;\n      }\n      lastIndex = offset + length;\n      // If `length` is 0, skip the current `&` and continue.\n      offset = length === 0 ? lastIndex + 1 : lastIndex;\n    }\n    const result = returnValue + input.slice(lastIndex);\n    // Make sure we don't keep a reference to the final string.\n    returnValue = \"\";\n    return result;\n  };\n}\n/**\r\n * Determines the branch of the current node that is taken given the current\r\n * character. This function is used to traverse the trie.\r\n *\r\n * @param decodeTree The trie.\r\n * @param current The current node.\r\n * @param nodeIdx The index right after the current node and its value.\r\n * @param char The current character.\r\n * @returns The index of the next node, or -1 if no branch is taken.\r\n */\nexport function determineBranch(decodeTree, current, nodeIndex, char) {\n  const branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;\n  const jumpOffset = current & BinTrieFlags.JUMP_TABLE;\n  // Case 1: Single branch encoded in jump offset\n  if (branchCount === 0) {\n    return jumpOffset !== 0 && char === jumpOffset ? nodeIndex : -1;\n  }\n  // Case 2: Multiple branches encoded in jump table\n  if (jumpOffset) {\n    const value = char - jumpOffset;\n    return value < 0 || value >= branchCount ? -1 : decodeTree[nodeIndex + value] - 1;\n  }\n  // Case 3: Multiple branches encoded in dictionary\n  // Binary search for the character.\n  let lo = nodeIndex;\n  let hi = lo + branchCount - 1;\n  while (lo <= hi) {\n    const mid = lo + hi >>> 1;\n    const midValue = decodeTree[mid];\n    if (midValue < char) {\n      lo = mid + 1;\n    } else if (midValue > char) {\n      hi = mid - 1;\n    } else {\n      return decodeTree[mid + branchCount];\n    }\n  }\n  return -1;\n}\nconst htmlDecoder = /* #__PURE__ */getDecoder(htmlDecodeTree);\nconst xmlDecoder = /* #__PURE__ */getDecoder(xmlDecodeTree);\n/**\r\n * Decodes an HTML string.\r\n *\r\n * @param htmlString The string to decode.\r\n * @param mode The decoding mode.\r\n * @returns The decoded string.\r\n */\nexport function decodeHTML(htmlString, mode = DecodingMode.Legacy) {\n  return htmlDecoder(htmlString, mode);\n}\n/**\r\n * Decodes an HTML string in an attribute.\r\n *\r\n * @param htmlAttribute The string to decode.\r\n * @returns The decoded string.\r\n */\nexport function decodeHTMLAttribute(htmlAttribute) {\n  return htmlDecoder(htmlAttribute, DecodingMode.Attribute);\n}\n/**\r\n * Decodes an HTML string, requiring all entities to be terminated by a semicolon.\r\n *\r\n * @param htmlString The string to decode.\r\n * @returns The decoded string.\r\n */\nexport function decodeHTMLStrict(htmlString) {\n  return htmlDecoder(htmlString, DecodingMode.Strict);\n}\n/**\r\n * Decodes an XML string, requiring all entities to be terminated by a semicolon.\r\n *\r\n * @param xmlString The string to decode.\r\n * @returns The decoded string.\r\n */\nexport function decodeXML(xmlString) {\n  return xmlDecoder(xmlString, DecodingMode.Strict);\n}\n// Re-export for use by eg. htmlparser2\nexport { htmlDecodeTree } from \"./generated/decode-data-html.js\";\nexport { xmlDecodeTree } from \"./generated/decode-data-xml.js\";\nexport { decodeCodePoint, replaceCodePoint, fromCodePoint } from \"./decode-codepoint.js\";","map":{"version":3,"names":["htmlDecodeTree","xmlDecodeTree","replaceCodePoint","fromCodePoint","CharCodes","TO_LOWER_BIT","BinTrieFlags","isNumber","code","ZERO","NINE","isHexadecimalCharacter","UPPER_A","UPPER_F","LOWER_A","LOWER_F","isAsciiAlphaNumeric","UPPER_Z","LOWER_Z","isEntityInAttributeInvalidEnd","EQUALS","EntityDecoderState","DecodingMode","EntityDecoder","constructor","decodeTree","emitCodePoint","errors","state","EntityStart","consumed","result","treeIndex","excess","decodeMode","Strict","startEntity","write","input","offset","charCodeAt","NUM","NumericStart","stateNumericStart","NamedEntity","stateNamedEntity","NumericDecimal","stateNumericDecimal","NumericHex","stateNumericHex","length","LOWER_X","addToNumericResult","start","end","base","digitCount","Math","pow","Number","parseInt","substr","startIndex","char","emitNumericEntity","lastCp","expectedLength","_a","absenceOfDigitsInNumericCharacterReference","SEMI","missingSemicolonAfterCharacterReference","validateNumericCharacterReference","current","valueLength","VALUE_LENGTH","determineBranch","max","Attribute","emitNotTerminatedNamedEntity","emitNamedEntityData","getDecoder","returnValue","decoder","data","decodeWithTrie","lastIndex","indexOf","slice","nodeIndex","branchCount","BRANCH_LENGTH","jumpOffset","JUMP_TABLE","value","lo","hi","mid","midValue","htmlDecoder","xmlDecoder","decodeHTML","htmlString","mode","Legacy","decodeHTMLAttribute","htmlAttribute","decodeHTMLStrict","decodeXML","xmlString","decodeCodePoint"],"sources":["C:\\Users\\smart\\Downloads\\Final Project P20119\\makeathon-2025\\makeathon\\node_modules\\hast-util-raw\\node_modules\\entities\\src\\decode.ts"],"sourcesContent":["import { htmlDecodeTree } from \"./generated/decode-data-html.js\";\r\nimport { xmlDecodeTree } from \"./generated/decode-data-xml.js\";\r\nimport { replaceCodePoint, fromCodePoint } from \"./decode-codepoint.js\";\r\n\r\nconst enum CharCodes {\r\n    NUM = 35, // \"#\"\r\n    SEMI = 59, // \";\"\r\n    EQUALS = 61, // \"=\"\r\n    ZERO = 48, // \"0\"\r\n    NINE = 57, // \"9\"\r\n    LOWER_A = 97, // \"a\"\r\n    LOWER_F = 102, // \"f\"\r\n    LOWER_X = 120, // \"x\"\r\n    LOWER_Z = 122, // \"z\"\r\n    UPPER_A = 65, // \"A\"\r\n    UPPER_F = 70, // \"F\"\r\n    UPPER_Z = 90, // \"Z\"\r\n}\r\n\r\n/** Bit that needs to be set to convert an upper case ASCII character to lower case */\r\nconst TO_LOWER_BIT = 0b10_0000;\r\n\r\nexport enum BinTrieFlags {\r\n    VALUE_LENGTH = 0b1100_0000_0000_0000,\r\n    BRANCH_LENGTH = 0b0011_1111_1000_0000,\r\n    JUMP_TABLE = 0b0000_0000_0111_1111,\r\n}\r\n\r\nfunction isNumber(code: number): boolean {\r\n    return code >= CharCodes.ZERO && code <= CharCodes.NINE;\r\n}\r\n\r\nfunction isHexadecimalCharacter(code: number): boolean {\r\n    return (\r\n        (code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_F) ||\r\n        (code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_F)\r\n    );\r\n}\r\n\r\nfunction isAsciiAlphaNumeric(code: number): boolean {\r\n    return (\r\n        (code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_Z) ||\r\n        (code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_Z) ||\r\n        isNumber(code)\r\n    );\r\n}\r\n\r\n/**\r\n * Checks if the given character is a valid end character for an entity in an attribute.\r\n *\r\n * Attribute values that aren't terminated properly aren't parsed, and shouldn't lead to a parser error.\r\n * See the example in https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state\r\n */\r\nfunction isEntityInAttributeInvalidEnd(code: number): boolean {\r\n    return code === CharCodes.EQUALS || isAsciiAlphaNumeric(code);\r\n}\r\n\r\nconst enum EntityDecoderState {\r\n    EntityStart,\r\n    NumericStart,\r\n    NumericDecimal,\r\n    NumericHex,\r\n    NamedEntity,\r\n}\r\n\r\nexport enum DecodingMode {\r\n    /** Entities in text nodes that can end with any character. */\r\n    Legacy = 0,\r\n    /** Only allow entities terminated with a semicolon. */\r\n    Strict = 1,\r\n    /** Entities in attributes have limitations on ending characters. */\r\n    Attribute = 2,\r\n}\r\n\r\n/**\r\n * Producers for character reference errors as defined in the HTML spec.\r\n */\r\nexport interface EntityErrorProducer {\r\n    missingSemicolonAfterCharacterReference(): void;\r\n    absenceOfDigitsInNumericCharacterReference(\r\n        consumedCharacters: number,\r\n    ): void;\r\n    validateNumericCharacterReference(code: number): void;\r\n}\r\n\r\n/**\r\n * Token decoder with support of writing partial entities.\r\n */\r\nexport class EntityDecoder {\r\n    constructor(\r\n        /** The tree used to decode entities. */\r\n        private readonly decodeTree: Uint16Array,\r\n        /**\r\n         * The function that is called when a codepoint is decoded.\r\n         *\r\n         * For multi-byte named entities, this will be called multiple times,\r\n         * with the second codepoint, and the same `consumed` value.\r\n         *\r\n         * @param codepoint The decoded codepoint.\r\n         * @param consumed The number of bytes consumed by the decoder.\r\n         */\r\n        private readonly emitCodePoint: (cp: number, consumed: number) => void,\r\n        /** An object that is used to produce errors. */\r\n        private readonly errors?: EntityErrorProducer | undefined,\r\n    ) {}\r\n\r\n    /** The current state of the decoder. */\r\n    private state = EntityDecoderState.EntityStart;\r\n    /** Characters that were consumed while parsing an entity. */\r\n    private consumed = 1;\r\n    /**\r\n     * The result of the entity.\r\n     *\r\n     * Either the result index of a numeric entity, or the codepoint of a\r\n     * numeric entity.\r\n     */\r\n    private result = 0;\r\n\r\n    /** The current index in the decode tree. */\r\n    private treeIndex = 0;\r\n    /** The number of characters that were consumed in excess. */\r\n    private excess = 1;\r\n    /** The mode in which the decoder is operating. */\r\n    private decodeMode = DecodingMode.Strict;\r\n\r\n    /** Resets the instance to make it reusable. */\r\n    startEntity(decodeMode: DecodingMode): void {\r\n        this.decodeMode = decodeMode;\r\n        this.state = EntityDecoderState.EntityStart;\r\n        this.result = 0;\r\n        this.treeIndex = 0;\r\n        this.excess = 1;\r\n        this.consumed = 1;\r\n    }\r\n\r\n    /**\r\n     * Write an entity to the decoder. This can be called multiple times with partial entities.\r\n     * If the entity is incomplete, the decoder will return -1.\r\n     *\r\n     * Mirrors the implementation of `getDecoder`, but with the ability to stop decoding if the\r\n     * entity is incomplete, and resume when the next string is written.\r\n     *\r\n     * @param input The string containing the entity (or a continuation of the entity).\r\n     * @param offset The offset at which the entity begins. Should be 0 if this is not the first call.\r\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\r\n     */\r\n    write(input: string, offset: number): number {\r\n        switch (this.state) {\r\n            case EntityDecoderState.EntityStart: {\r\n                if (input.charCodeAt(offset) === CharCodes.NUM) {\r\n                    this.state = EntityDecoderState.NumericStart;\r\n                    this.consumed += 1;\r\n                    return this.stateNumericStart(input, offset + 1);\r\n                }\r\n                this.state = EntityDecoderState.NamedEntity;\r\n                return this.stateNamedEntity(input, offset);\r\n            }\r\n\r\n            case EntityDecoderState.NumericStart: {\r\n                return this.stateNumericStart(input, offset);\r\n            }\r\n\r\n            case EntityDecoderState.NumericDecimal: {\r\n                return this.stateNumericDecimal(input, offset);\r\n            }\r\n\r\n            case EntityDecoderState.NumericHex: {\r\n                return this.stateNumericHex(input, offset);\r\n            }\r\n\r\n            case EntityDecoderState.NamedEntity: {\r\n                return this.stateNamedEntity(input, offset);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Switches between the numeric decimal and hexadecimal states.\r\n     *\r\n     * Equivalent to the `Numeric character reference state` in the HTML spec.\r\n     *\r\n     * @param input The string containing the entity (or a continuation of the entity).\r\n     * @param offset The current offset.\r\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\r\n     */\r\n    private stateNumericStart(input: string, offset: number): number {\r\n        if (offset >= input.length) {\r\n            return -1;\r\n        }\r\n\r\n        if ((input.charCodeAt(offset) | TO_LOWER_BIT) === CharCodes.LOWER_X) {\r\n            this.state = EntityDecoderState.NumericHex;\r\n            this.consumed += 1;\r\n            return this.stateNumericHex(input, offset + 1);\r\n        }\r\n\r\n        this.state = EntityDecoderState.NumericDecimal;\r\n        return this.stateNumericDecimal(input, offset);\r\n    }\r\n\r\n    private addToNumericResult(\r\n        input: string,\r\n        start: number,\r\n        end: number,\r\n        base: number,\r\n    ): void {\r\n        if (start !== end) {\r\n            const digitCount = end - start;\r\n            this.result =\r\n                this.result * Math.pow(base, digitCount) +\r\n                Number.parseInt(input.substr(start, digitCount), base);\r\n            this.consumed += digitCount;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parses a hexadecimal numeric entity.\r\n     *\r\n     * Equivalent to the `Hexademical character reference state` in the HTML spec.\r\n     *\r\n     * @param input The string containing the entity (or a continuation of the entity).\r\n     * @param offset The current offset.\r\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\r\n     */\r\n    private stateNumericHex(input: string, offset: number): number {\r\n        const startIndex = offset;\r\n\r\n        while (offset < input.length) {\r\n            const char = input.charCodeAt(offset);\r\n            if (isNumber(char) || isHexadecimalCharacter(char)) {\r\n                offset += 1;\r\n            } else {\r\n                this.addToNumericResult(input, startIndex, offset, 16);\r\n                return this.emitNumericEntity(char, 3);\r\n            }\r\n        }\r\n\r\n        this.addToNumericResult(input, startIndex, offset, 16);\r\n\r\n        return -1;\r\n    }\r\n\r\n    /**\r\n     * Parses a decimal numeric entity.\r\n     *\r\n     * Equivalent to the `Decimal character reference state` in the HTML spec.\r\n     *\r\n     * @param input The string containing the entity (or a continuation of the entity).\r\n     * @param offset The current offset.\r\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\r\n     */\r\n    private stateNumericDecimal(input: string, offset: number): number {\r\n        const startIndex = offset;\r\n\r\n        while (offset < input.length) {\r\n            const char = input.charCodeAt(offset);\r\n            if (isNumber(char)) {\r\n                offset += 1;\r\n            } else {\r\n                this.addToNumericResult(input, startIndex, offset, 10);\r\n                return this.emitNumericEntity(char, 2);\r\n            }\r\n        }\r\n\r\n        this.addToNumericResult(input, startIndex, offset, 10);\r\n\r\n        return -1;\r\n    }\r\n\r\n    /**\r\n     * Validate and emit a numeric entity.\r\n     *\r\n     * Implements the logic from the `Hexademical character reference start\r\n     * state` and `Numeric character reference end state` in the HTML spec.\r\n     *\r\n     * @param lastCp The last code point of the entity. Used to see if the\r\n     *               entity was terminated with a semicolon.\r\n     * @param expectedLength The minimum number of characters that should be\r\n     *                       consumed. Used to validate that at least one digit\r\n     *                       was consumed.\r\n     * @returns The number of characters that were consumed.\r\n     */\r\n    private emitNumericEntity(lastCp: number, expectedLength: number): number {\r\n        // Ensure we consumed at least one digit.\r\n        if (this.consumed <= expectedLength) {\r\n            this.errors?.absenceOfDigitsInNumericCharacterReference(\r\n                this.consumed,\r\n            );\r\n            return 0;\r\n        }\r\n\r\n        // Figure out if this is a legit end of the entity\r\n        if (lastCp === CharCodes.SEMI) {\r\n            this.consumed += 1;\r\n        } else if (this.decodeMode === DecodingMode.Strict) {\r\n            return 0;\r\n        }\r\n\r\n        this.emitCodePoint(replaceCodePoint(this.result), this.consumed);\r\n\r\n        if (this.errors) {\r\n            if (lastCp !== CharCodes.SEMI) {\r\n                this.errors.missingSemicolonAfterCharacterReference();\r\n            }\r\n\r\n            this.errors.validateNumericCharacterReference(this.result);\r\n        }\r\n\r\n        return this.consumed;\r\n    }\r\n\r\n    /**\r\n     * Parses a named entity.\r\n     *\r\n     * Equivalent to the `Named character reference state` in the HTML spec.\r\n     *\r\n     * @param input The string containing the entity (or a continuation of the entity).\r\n     * @param offset The current offset.\r\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\r\n     */\r\n    private stateNamedEntity(input: string, offset: number): number {\r\n        const { decodeTree } = this;\r\n        let current = decodeTree[this.treeIndex];\r\n        // The mask is the number of bytes of the value, including the current byte.\r\n        let valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;\r\n\r\n        for (; offset < input.length; offset++, this.excess++) {\r\n            const char = input.charCodeAt(offset);\r\n\r\n            this.treeIndex = determineBranch(\r\n                decodeTree,\r\n                current,\r\n                this.treeIndex + Math.max(1, valueLength),\r\n                char,\r\n            );\r\n\r\n            if (this.treeIndex < 0) {\r\n                return this.result === 0 ||\r\n                    // If we are parsing an attribute\r\n                    (this.decodeMode === DecodingMode.Attribute &&\r\n                        // We shouldn't have consumed any characters after the entity,\r\n                        (valueLength === 0 ||\r\n                            // And there should be no invalid characters.\r\n                            isEntityInAttributeInvalidEnd(char)))\r\n                    ? 0\r\n                    : this.emitNotTerminatedNamedEntity();\r\n            }\r\n\r\n            current = decodeTree[this.treeIndex];\r\n            valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;\r\n\r\n            // If the branch is a value, store it and continue\r\n            if (valueLength !== 0) {\r\n                // If the entity is terminated by a semicolon, we are done.\r\n                if (char === CharCodes.SEMI) {\r\n                    return this.emitNamedEntityData(\r\n                        this.treeIndex,\r\n                        valueLength,\r\n                        this.consumed + this.excess,\r\n                    );\r\n                }\r\n\r\n                // If we encounter a non-terminated (legacy) entity while parsing strictly, then ignore it.\r\n                if (this.decodeMode !== DecodingMode.Strict) {\r\n                    this.result = this.treeIndex;\r\n                    this.consumed += this.excess;\r\n                    this.excess = 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    /**\r\n     * Emit a named entity that was not terminated with a semicolon.\r\n     *\r\n     * @returns The number of characters consumed.\r\n     */\r\n    private emitNotTerminatedNamedEntity(): number {\r\n        const { result, decodeTree } = this;\r\n\r\n        const valueLength =\r\n            (decodeTree[result] & BinTrieFlags.VALUE_LENGTH) >> 14;\r\n\r\n        this.emitNamedEntityData(result, valueLength, this.consumed);\r\n        this.errors?.missingSemicolonAfterCharacterReference();\r\n\r\n        return this.consumed;\r\n    }\r\n\r\n    /**\r\n     * Emit a named entity.\r\n     *\r\n     * @param result The index of the entity in the decode tree.\r\n     * @param valueLength The number of bytes in the entity.\r\n     * @param consumed The number of characters consumed.\r\n     *\r\n     * @returns The number of characters consumed.\r\n     */\r\n    private emitNamedEntityData(\r\n        result: number,\r\n        valueLength: number,\r\n        consumed: number,\r\n    ): number {\r\n        const { decodeTree } = this;\r\n\r\n        this.emitCodePoint(\r\n            valueLength === 1\r\n                ? decodeTree[result] & ~BinTrieFlags.VALUE_LENGTH\r\n                : decodeTree[result + 1],\r\n            consumed,\r\n        );\r\n        if (valueLength === 3) {\r\n            // For multi-byte values, we need to emit the second byte.\r\n            this.emitCodePoint(decodeTree[result + 2], consumed);\r\n        }\r\n\r\n        return consumed;\r\n    }\r\n\r\n    /**\r\n     * Signal to the parser that the end of the input was reached.\r\n     *\r\n     * Remaining data will be emitted and relevant errors will be produced.\r\n     *\r\n     * @returns The number of characters consumed.\r\n     */\r\n    end(): number {\r\n        switch (this.state) {\r\n            case EntityDecoderState.NamedEntity: {\r\n                // Emit a named entity if we have one.\r\n                return this.result !== 0 &&\r\n                    (this.decodeMode !== DecodingMode.Attribute ||\r\n                        this.result === this.treeIndex)\r\n                    ? this.emitNotTerminatedNamedEntity()\r\n                    : 0;\r\n            }\r\n            // Otherwise, emit a numeric entity if we have one.\r\n            case EntityDecoderState.NumericDecimal: {\r\n                return this.emitNumericEntity(0, 2);\r\n            }\r\n            case EntityDecoderState.NumericHex: {\r\n                return this.emitNumericEntity(0, 3);\r\n            }\r\n            case EntityDecoderState.NumericStart: {\r\n                this.errors?.absenceOfDigitsInNumericCharacterReference(\r\n                    this.consumed,\r\n                );\r\n                return 0;\r\n            }\r\n            case EntityDecoderState.EntityStart: {\r\n                // Return 0 if we have no entity.\r\n                return 0;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a function that decodes entities in a string.\r\n *\r\n * @param decodeTree The decode tree.\r\n * @returns A function that decodes entities in a string.\r\n */\r\nfunction getDecoder(decodeTree: Uint16Array) {\r\n    let returnValue = \"\";\r\n    const decoder = new EntityDecoder(\r\n        decodeTree,\r\n        (data) => (returnValue += fromCodePoint(data)),\r\n    );\r\n\r\n    return function decodeWithTrie(\r\n        input: string,\r\n        decodeMode: DecodingMode,\r\n    ): string {\r\n        let lastIndex = 0;\r\n        let offset = 0;\r\n\r\n        while ((offset = input.indexOf(\"&\", offset)) >= 0) {\r\n            returnValue += input.slice(lastIndex, offset);\r\n\r\n            decoder.startEntity(decodeMode);\r\n\r\n            const length = decoder.write(\r\n                input,\r\n                // Skip the \"&\"\r\n                offset + 1,\r\n            );\r\n\r\n            if (length < 0) {\r\n                lastIndex = offset + decoder.end();\r\n                break;\r\n            }\r\n\r\n            lastIndex = offset + length;\r\n            // If `length` is 0, skip the current `&` and continue.\r\n            offset = length === 0 ? lastIndex + 1 : lastIndex;\r\n        }\r\n\r\n        const result = returnValue + input.slice(lastIndex);\r\n\r\n        // Make sure we don't keep a reference to the final string.\r\n        returnValue = \"\";\r\n\r\n        return result;\r\n    };\r\n}\r\n\r\n/**\r\n * Determines the branch of the current node that is taken given the current\r\n * character. This function is used to traverse the trie.\r\n *\r\n * @param decodeTree The trie.\r\n * @param current The current node.\r\n * @param nodeIdx The index right after the current node and its value.\r\n * @param char The current character.\r\n * @returns The index of the next node, or -1 if no branch is taken.\r\n */\r\nexport function determineBranch(\r\n    decodeTree: Uint16Array,\r\n    current: number,\r\n    nodeIndex: number,\r\n    char: number,\r\n): number {\r\n    const branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;\r\n    const jumpOffset = current & BinTrieFlags.JUMP_TABLE;\r\n\r\n    // Case 1: Single branch encoded in jump offset\r\n    if (branchCount === 0) {\r\n        return jumpOffset !== 0 && char === jumpOffset ? nodeIndex : -1;\r\n    }\r\n\r\n    // Case 2: Multiple branches encoded in jump table\r\n    if (jumpOffset) {\r\n        const value = char - jumpOffset;\r\n\r\n        return value < 0 || value >= branchCount\r\n            ? -1\r\n            : decodeTree[nodeIndex + value] - 1;\r\n    }\r\n\r\n    // Case 3: Multiple branches encoded in dictionary\r\n\r\n    // Binary search for the character.\r\n    let lo = nodeIndex;\r\n    let hi = lo + branchCount - 1;\r\n\r\n    while (lo <= hi) {\r\n        const mid = (lo + hi) >>> 1;\r\n        const midValue = decodeTree[mid];\r\n\r\n        if (midValue < char) {\r\n            lo = mid + 1;\r\n        } else if (midValue > char) {\r\n            hi = mid - 1;\r\n        } else {\r\n            return decodeTree[mid + branchCount];\r\n        }\r\n    }\r\n\r\n    return -1;\r\n}\r\n\r\nconst htmlDecoder = /* #__PURE__ */ getDecoder(htmlDecodeTree);\r\nconst xmlDecoder = /* #__PURE__ */ getDecoder(xmlDecodeTree);\r\n\r\n/**\r\n * Decodes an HTML string.\r\n *\r\n * @param htmlString The string to decode.\r\n * @param mode The decoding mode.\r\n * @returns The decoded string.\r\n */\r\nexport function decodeHTML(\r\n    htmlString: string,\r\n    mode: DecodingMode = DecodingMode.Legacy,\r\n): string {\r\n    return htmlDecoder(htmlString, mode);\r\n}\r\n\r\n/**\r\n * Decodes an HTML string in an attribute.\r\n *\r\n * @param htmlAttribute The string to decode.\r\n * @returns The decoded string.\r\n */\r\nexport function decodeHTMLAttribute(htmlAttribute: string): string {\r\n    return htmlDecoder(htmlAttribute, DecodingMode.Attribute);\r\n}\r\n\r\n/**\r\n * Decodes an HTML string, requiring all entities to be terminated by a semicolon.\r\n *\r\n * @param htmlString The string to decode.\r\n * @returns The decoded string.\r\n */\r\nexport function decodeHTMLStrict(htmlString: string): string {\r\n    return htmlDecoder(htmlString, DecodingMode.Strict);\r\n}\r\n\r\n/**\r\n * Decodes an XML string, requiring all entities to be terminated by a semicolon.\r\n *\r\n * @param xmlString The string to decode.\r\n * @returns The decoded string.\r\n */\r\nexport function decodeXML(xmlString: string): string {\r\n    return xmlDecoder(xmlString, DecodingMode.Strict);\r\n}\r\n\r\n// Re-export for use by eg. htmlparser2\r\nexport { htmlDecodeTree } from \"./generated/decode-data-html.js\";\r\nexport { xmlDecodeTree } from \"./generated/decode-data-xml.js\";\r\n\r\nexport {\r\n    decodeCodePoint,\r\n    replaceCodePoint,\r\n    fromCodePoint,\r\n} from \"./decode-codepoint.js\";\r\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,iCAAiC;AAChE,SAASC,aAAa,QAAQ,gCAAgC;AAC9D,SAASC,gBAAgB,EAAEC,aAAa,QAAQ,uBAAuB;AAEvE,IAAWC,SAaV;AAbD,WAAWA,SAAS;EAChBA,SAAA,CAAAA,SAAA,qBAAQ;EACRA,SAAA,CAAAA,SAAA,uBAAS;EACTA,SAAA,CAAAA,SAAA,2BAAW;EACXA,SAAA,CAAAA,SAAA,uBAAS;EACTA,SAAA,CAAAA,SAAA,uBAAS;EACTA,SAAA,CAAAA,SAAA,6BAAY;EACZA,SAAA,CAAAA,SAAA,8BAAa;EACbA,SAAA,CAAAA,SAAA,8BAAa;EACbA,SAAA,CAAAA,SAAA,8BAAa;EACbA,SAAA,CAAAA,SAAA,6BAAY;EACZA,SAAA,CAAAA,SAAA,6BAAY;EACZA,SAAA,CAAAA,SAAA,6BAAY;AAChB,CAAC,EAbUA,SAAS,KAATA,SAAS;AAepB;AACA,MAAMC,YAAY,GAAG,EAAS;AAE9B,WAAYC,YAIX;AAJD,WAAYA,YAAY;EACpBA,YAAA,CAAAA,YAAA,0CAAoC;EACpCA,YAAA,CAAAA,YAAA,4CAAqC;EACrCA,YAAA,CAAAA,YAAA,oCAAkC;AACtC,CAAC,EAJWA,YAAY,KAAZA,YAAY;AAMxB,SAASC,QAAQA,CAACC,IAAY;EAC1B,OAAOA,IAAI,IAAIJ,SAAS,CAACK,IAAI,IAAID,IAAI,IAAIJ,SAAS,CAACM,IAAI;AAC3D;AAEA,SAASC,sBAAsBA,CAACH,IAAY;EACxC,OACKA,IAAI,IAAIJ,SAAS,CAACQ,OAAO,IAAIJ,IAAI,IAAIJ,SAAS,CAACS,OAAO,IACtDL,IAAI,IAAIJ,SAAS,CAACU,OAAO,IAAIN,IAAI,IAAIJ,SAAS,CAACW,OAAQ;AAEhE;AAEA,SAASC,mBAAmBA,CAACR,IAAY;EACrC,OACKA,IAAI,IAAIJ,SAAS,CAACQ,OAAO,IAAIJ,IAAI,IAAIJ,SAAS,CAACa,OAAO,IACtDT,IAAI,IAAIJ,SAAS,CAACU,OAAO,IAAIN,IAAI,IAAIJ,SAAS,CAACc,OAAQ,IACxDX,QAAQ,CAACC,IAAI,CAAC;AAEtB;AAEA;;;;;;AAMA,SAASW,6BAA6BA,CAACX,IAAY;EAC/C,OAAOA,IAAI,KAAKJ,SAAS,CAACgB,MAAM,IAAIJ,mBAAmB,CAACR,IAAI,CAAC;AACjE;AAEA,IAAWa,kBAMV;AAND,WAAWA,kBAAkB;EACzBA,kBAAA,CAAAA,kBAAA,oCAAW;EACXA,kBAAA,CAAAA,kBAAA,sCAAY;EACZA,kBAAA,CAAAA,kBAAA,0CAAc;EACdA,kBAAA,CAAAA,kBAAA,kCAAU;EACVA,kBAAA,CAAAA,kBAAA,oCAAW;AACf,CAAC,EANUA,kBAAkB,KAAlBA,kBAAkB;AAQ7B,WAAYC,YAOX;AAPD,WAAYA,YAAY;EACpB;EACAA,YAAA,CAAAA,YAAA,0BAAU;EACV;EACAA,YAAA,CAAAA,YAAA,0BAAU;EACV;EACAA,YAAA,CAAAA,YAAA,gCAAa;AACjB,CAAC,EAPWA,YAAY,KAAZA,YAAY;AAoBxB;;;AAGA,OAAM,MAAOC,aAAa;EACtBC,YACI;EACiBC,UAAuB;EACxC;;;;;;;;;EASiBC,aAAqD,EACtE;EACiBC,MAAwC;IAZxC,KAAAF,UAAU,GAAVA,UAAU;IAUV,KAAAC,aAAa,GAAbA,aAAa;IAEb,KAAAC,MAAM,GAANA,MAAM;IAG3B;IACQ,KAAAC,KAAK,GAAGP,kBAAkB,CAACQ,WAAW;IAC9C;IACQ,KAAAC,QAAQ,GAAG,CAAC;IACpB;;;;;;IAMQ,KAAAC,MAAM,GAAG,CAAC;IAElB;IACQ,KAAAC,SAAS,GAAG,CAAC;IACrB;IACQ,KAAAC,MAAM,GAAG,CAAC;IAClB;IACQ,KAAAC,UAAU,GAAGZ,YAAY,CAACa,MAAM;EAnBrC;EAqBH;EACAC,WAAWA,CAACF,UAAwB;IAChC,IAAI,CAACA,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACN,KAAK,GAAGP,kBAAkB,CAACQ,WAAW;IAC3C,IAAI,CAACE,MAAM,GAAG,CAAC;IACf,IAAI,CAACC,SAAS,GAAG,CAAC;IAClB,IAAI,CAACC,MAAM,GAAG,CAAC;IACf,IAAI,CAACH,QAAQ,GAAG,CAAC;EACrB;EAEA;;;;;;;;;;;EAWAO,KAAKA,CAACC,KAAa,EAAEC,MAAc;IAC/B,QAAQ,IAAI,CAACX,KAAK;MACd,KAAKP,kBAAkB,CAACQ,WAAW;QAAE;UACjC,IAAIS,KAAK,CAACE,UAAU,CAACD,MAAM,CAAC,KAAKnC,SAAS,CAACqC,GAAG,EAAE;YAC5C,IAAI,CAACb,KAAK,GAAGP,kBAAkB,CAACqB,YAAY;YAC5C,IAAI,CAACZ,QAAQ,IAAI,CAAC;YAClB,OAAO,IAAI,CAACa,iBAAiB,CAACL,KAAK,EAAEC,MAAM,GAAG,CAAC,CAAC;UACpD;UACA,IAAI,CAACX,KAAK,GAAGP,kBAAkB,CAACuB,WAAW;UAC3C,OAAO,IAAI,CAACC,gBAAgB,CAACP,KAAK,EAAEC,MAAM,CAAC;QAC/C;MAEA,KAAKlB,kBAAkB,CAACqB,YAAY;QAAE;UAClC,OAAO,IAAI,CAACC,iBAAiB,CAACL,KAAK,EAAEC,MAAM,CAAC;QAChD;MAEA,KAAKlB,kBAAkB,CAACyB,cAAc;QAAE;UACpC,OAAO,IAAI,CAACC,mBAAmB,CAACT,KAAK,EAAEC,MAAM,CAAC;QAClD;MAEA,KAAKlB,kBAAkB,CAAC2B,UAAU;QAAE;UAChC,OAAO,IAAI,CAACC,eAAe,CAACX,KAAK,EAAEC,MAAM,CAAC;QAC9C;MAEA,KAAKlB,kBAAkB,CAACuB,WAAW;QAAE;UACjC,OAAO,IAAI,CAACC,gBAAgB,CAACP,KAAK,EAAEC,MAAM,CAAC;QAC/C;IACJ;EACJ;EAEA;;;;;;;;;EASQI,iBAAiBA,CAACL,KAAa,EAAEC,MAAc;IACnD,IAAIA,MAAM,IAAID,KAAK,CAACY,MAAM,EAAE;MACxB,OAAO,CAAC,CAAC;IACb;IAEA,IAAI,CAACZ,KAAK,CAACE,UAAU,CAACD,MAAM,CAAC,GAAGlC,YAAY,MAAMD,SAAS,CAAC+C,OAAO,EAAE;MACjE,IAAI,CAACvB,KAAK,GAAGP,kBAAkB,CAAC2B,UAAU;MAC1C,IAAI,CAAClB,QAAQ,IAAI,CAAC;MAClB,OAAO,IAAI,CAACmB,eAAe,CAACX,KAAK,EAAEC,MAAM,GAAG,CAAC,CAAC;IAClD;IAEA,IAAI,CAACX,KAAK,GAAGP,kBAAkB,CAACyB,cAAc;IAC9C,OAAO,IAAI,CAACC,mBAAmB,CAACT,KAAK,EAAEC,MAAM,CAAC;EAClD;EAEQa,kBAAkBA,CACtBd,KAAa,EACbe,KAAa,EACbC,GAAW,EACXC,IAAY;IAEZ,IAAIF,KAAK,KAAKC,GAAG,EAAE;MACf,MAAME,UAAU,GAAGF,GAAG,GAAGD,KAAK;MAC9B,IAAI,CAACtB,MAAM,GACP,IAAI,CAACA,MAAM,GAAG0B,IAAI,CAACC,GAAG,CAACH,IAAI,EAAEC,UAAU,CAAC,GACxCG,MAAM,CAACC,QAAQ,CAACtB,KAAK,CAACuB,MAAM,CAACR,KAAK,EAAEG,UAAU,CAAC,EAAED,IAAI,CAAC;MAC1D,IAAI,CAACzB,QAAQ,IAAI0B,UAAU;IAC/B;EACJ;EAEA;;;;;;;;;EASQP,eAAeA,CAACX,KAAa,EAAEC,MAAc;IACjD,MAAMuB,UAAU,GAAGvB,MAAM;IAEzB,OAAOA,MAAM,GAAGD,KAAK,CAACY,MAAM,EAAE;MAC1B,MAAMa,IAAI,GAAGzB,KAAK,CAACE,UAAU,CAACD,MAAM,CAAC;MACrC,IAAIhC,QAAQ,CAACwD,IAAI,CAAC,IAAIpD,sBAAsB,CAACoD,IAAI,CAAC,EAAE;QAChDxB,MAAM,IAAI,CAAC;MACf,CAAC,MAAM;QACH,IAAI,CAACa,kBAAkB,CAACd,KAAK,EAAEwB,UAAU,EAAEvB,MAAM,EAAE,EAAE,CAAC;QACtD,OAAO,IAAI,CAACyB,iBAAiB,CAACD,IAAI,EAAE,CAAC,CAAC;MAC1C;IACJ;IAEA,IAAI,CAACX,kBAAkB,CAACd,KAAK,EAAEwB,UAAU,EAAEvB,MAAM,EAAE,EAAE,CAAC;IAEtD,OAAO,CAAC,CAAC;EACb;EAEA;;;;;;;;;EASQQ,mBAAmBA,CAACT,KAAa,EAAEC,MAAc;IACrD,MAAMuB,UAAU,GAAGvB,MAAM;IAEzB,OAAOA,MAAM,GAAGD,KAAK,CAACY,MAAM,EAAE;MAC1B,MAAMa,IAAI,GAAGzB,KAAK,CAACE,UAAU,CAACD,MAAM,CAAC;MACrC,IAAIhC,QAAQ,CAACwD,IAAI,CAAC,EAAE;QAChBxB,MAAM,IAAI,CAAC;MACf,CAAC,MAAM;QACH,IAAI,CAACa,kBAAkB,CAACd,KAAK,EAAEwB,UAAU,EAAEvB,MAAM,EAAE,EAAE,CAAC;QACtD,OAAO,IAAI,CAACyB,iBAAiB,CAACD,IAAI,EAAE,CAAC,CAAC;MAC1C;IACJ;IAEA,IAAI,CAACX,kBAAkB,CAACd,KAAK,EAAEwB,UAAU,EAAEvB,MAAM,EAAE,EAAE,CAAC;IAEtD,OAAO,CAAC,CAAC;EACb;EAEA;;;;;;;;;;;;;EAaQyB,iBAAiBA,CAACC,MAAc,EAAEC,cAAsB;;IAC5D;IACA,IAAI,IAAI,CAACpC,QAAQ,IAAIoC,cAAc,EAAE;MACjC,CAAAC,EAAA,OAAI,CAACxC,MAAM,cAAAwC,EAAA,uBAAAA,EAAA,CAAEC,0CAA0C,CACnD,IAAI,CAACtC,QAAQ,CAChB;MACD,OAAO,CAAC;IACZ;IAEA;IACA,IAAImC,MAAM,KAAK7D,SAAS,CAACiE,IAAI,EAAE;MAC3B,IAAI,CAACvC,QAAQ,IAAI,CAAC;IACtB,CAAC,MAAM,IAAI,IAAI,CAACI,UAAU,KAAKZ,YAAY,CAACa,MAAM,EAAE;MAChD,OAAO,CAAC;IACZ;IAEA,IAAI,CAACT,aAAa,CAACxB,gBAAgB,CAAC,IAAI,CAAC6B,MAAM,CAAC,EAAE,IAAI,CAACD,QAAQ,CAAC;IAEhE,IAAI,IAAI,CAACH,MAAM,EAAE;MACb,IAAIsC,MAAM,KAAK7D,SAAS,CAACiE,IAAI,EAAE;QAC3B,IAAI,CAAC1C,MAAM,CAAC2C,uCAAuC,EAAE;MACzD;MAEA,IAAI,CAAC3C,MAAM,CAAC4C,iCAAiC,CAAC,IAAI,CAACxC,MAAM,CAAC;IAC9D;IAEA,OAAO,IAAI,CAACD,QAAQ;EACxB;EAEA;;;;;;;;;EASQe,gBAAgBA,CAACP,KAAa,EAAEC,MAAc;IAClD,MAAM;MAAEd;IAAU,CAAE,GAAG,IAAI;IAC3B,IAAI+C,OAAO,GAAG/C,UAAU,CAAC,IAAI,CAACO,SAAS,CAAC;IACxC;IACA,IAAIyC,WAAW,GAAG,CAACD,OAAO,GAAGlE,YAAY,CAACoE,YAAY,KAAK,EAAE;IAE7D,OAAOnC,MAAM,GAAGD,KAAK,CAACY,MAAM,EAAEX,MAAM,EAAE,EAAE,IAAI,CAACN,MAAM,EAAE,EAAE;MACnD,MAAM8B,IAAI,GAAGzB,KAAK,CAACE,UAAU,CAACD,MAAM,CAAC;MAErC,IAAI,CAACP,SAAS,GAAG2C,eAAe,CAC5BlD,UAAU,EACV+C,OAAO,EACP,IAAI,CAACxC,SAAS,GAAGyB,IAAI,CAACmB,GAAG,CAAC,CAAC,EAAEH,WAAW,CAAC,EACzCV,IAAI,CACP;MAED,IAAI,IAAI,CAAC/B,SAAS,GAAG,CAAC,EAAE;QACpB,OAAO,IAAI,CAACD,MAAM,KAAK,CAAC;QACpB;QACC,IAAI,CAACG,UAAU,KAAKZ,YAAY,CAACuD,SAAS;QACvC;QACCJ,WAAW,KAAK,CAAC;QACd;QACAtD,6BAA6B,CAAC4C,IAAI,CAAC,CAAE,GAC3C,CAAC,GACD,IAAI,CAACe,4BAA4B,EAAE;MAC7C;MAEAN,OAAO,GAAG/C,UAAU,CAAC,IAAI,CAACO,SAAS,CAAC;MACpCyC,WAAW,GAAG,CAACD,OAAO,GAAGlE,YAAY,CAACoE,YAAY,KAAK,EAAE;MAEzD;MACA,IAAID,WAAW,KAAK,CAAC,EAAE;QACnB;QACA,IAAIV,IAAI,KAAK3D,SAAS,CAACiE,IAAI,EAAE;UACzB,OAAO,IAAI,CAACU,mBAAmB,CAC3B,IAAI,CAAC/C,SAAS,EACdyC,WAAW,EACX,IAAI,CAAC3C,QAAQ,GAAG,IAAI,CAACG,MAAM,CAC9B;QACL;QAEA;QACA,IAAI,IAAI,CAACC,UAAU,KAAKZ,YAAY,CAACa,MAAM,EAAE;UACzC,IAAI,CAACJ,MAAM,GAAG,IAAI,CAACC,SAAS;UAC5B,IAAI,CAACF,QAAQ,IAAI,IAAI,CAACG,MAAM;UAC5B,IAAI,CAACA,MAAM,GAAG,CAAC;QACnB;MACJ;IACJ;IAEA,OAAO,CAAC,CAAC;EACb;EAEA;;;;;EAKQ6C,4BAA4BA,CAAA;;IAChC,MAAM;MAAE/C,MAAM;MAAEN;IAAU,CAAE,GAAG,IAAI;IAEnC,MAAMgD,WAAW,GACb,CAAChD,UAAU,CAACM,MAAM,CAAC,GAAGzB,YAAY,CAACoE,YAAY,KAAK,EAAE;IAE1D,IAAI,CAACK,mBAAmB,CAAChD,MAAM,EAAE0C,WAAW,EAAE,IAAI,CAAC3C,QAAQ,CAAC;IAC5D,CAAAqC,EAAA,OAAI,CAACxC,MAAM,cAAAwC,EAAA,uBAAAA,EAAA,CAAEG,uCAAuC,EAAE;IAEtD,OAAO,IAAI,CAACxC,QAAQ;EACxB;EAEA;;;;;;;;;EASQiD,mBAAmBA,CACvBhD,MAAc,EACd0C,WAAmB,EACnB3C,QAAgB;IAEhB,MAAM;MAAEL;IAAU,CAAE,GAAG,IAAI;IAE3B,IAAI,CAACC,aAAa,CACd+C,WAAW,KAAK,CAAC,GACXhD,UAAU,CAACM,MAAM,CAAC,GAAG,CAACzB,YAAY,CAACoE,YAAY,GAC/CjD,UAAU,CAACM,MAAM,GAAG,CAAC,CAAC,EAC5BD,QAAQ,CACX;IACD,IAAI2C,WAAW,KAAK,CAAC,EAAE;MACnB;MACA,IAAI,CAAC/C,aAAa,CAACD,UAAU,CAACM,MAAM,GAAG,CAAC,CAAC,EAAED,QAAQ,CAAC;IACxD;IAEA,OAAOA,QAAQ;EACnB;EAEA;;;;;;;EAOAwB,GAAGA,CAAA;;IACC,QAAQ,IAAI,CAAC1B,KAAK;MACd,KAAKP,kBAAkB,CAACuB,WAAW;QAAE;UACjC;UACA,OAAO,IAAI,CAACb,MAAM,KAAK,CAAC,KACnB,IAAI,CAACG,UAAU,KAAKZ,YAAY,CAACuD,SAAS,IACvC,IAAI,CAAC9C,MAAM,KAAK,IAAI,CAACC,SAAS,CAAC,GACjC,IAAI,CAAC8C,4BAA4B,EAAE,GACnC,CAAC;QACX;MACA;MACA,KAAKzD,kBAAkB,CAACyB,cAAc;QAAE;UACpC,OAAO,IAAI,CAACkB,iBAAiB,CAAC,CAAC,EAAE,CAAC,CAAC;QACvC;MACA,KAAK3C,kBAAkB,CAAC2B,UAAU;QAAE;UAChC,OAAO,IAAI,CAACgB,iBAAiB,CAAC,CAAC,EAAE,CAAC,CAAC;QACvC;MACA,KAAK3C,kBAAkB,CAACqB,YAAY;QAAE;UAClC,CAAAyB,EAAA,OAAI,CAACxC,MAAM,cAAAwC,EAAA,uBAAAA,EAAA,CAAEC,0CAA0C,CACnD,IAAI,CAACtC,QAAQ,CAChB;UACD,OAAO,CAAC;QACZ;MACA,KAAKT,kBAAkB,CAACQ,WAAW;QAAE;UACjC;UACA,OAAO,CAAC;QACZ;IACJ;EACJ;;AAGJ;;;;;;AAMA,SAASmD,UAAUA,CAACvD,UAAuB;EACvC,IAAIwD,WAAW,GAAG,EAAE;EACpB,MAAMC,OAAO,GAAG,IAAI3D,aAAa,CAC7BE,UAAU,EACT0D,IAAI,IAAMF,WAAW,IAAI9E,aAAa,CAACgF,IAAI,CAAE,CACjD;EAED,OAAO,SAASC,cAAcA,CAC1B9C,KAAa,EACbJ,UAAwB;IAExB,IAAImD,SAAS,GAAG,CAAC;IACjB,IAAI9C,MAAM,GAAG,CAAC;IAEd,OAAO,CAACA,MAAM,GAAGD,KAAK,CAACgD,OAAO,CAAC,GAAG,EAAE/C,MAAM,CAAC,KAAK,CAAC,EAAE;MAC/C0C,WAAW,IAAI3C,KAAK,CAACiD,KAAK,CAACF,SAAS,EAAE9C,MAAM,CAAC;MAE7C2C,OAAO,CAAC9C,WAAW,CAACF,UAAU,CAAC;MAE/B,MAAMgB,MAAM,GAAGgC,OAAO,CAAC7C,KAAK,CACxBC,KAAK;MACL;MACAC,MAAM,GAAG,CAAC,CACb;MAED,IAAIW,MAAM,GAAG,CAAC,EAAE;QACZmC,SAAS,GAAG9C,MAAM,GAAG2C,OAAO,CAAC5B,GAAG,EAAE;QAClC;MACJ;MAEA+B,SAAS,GAAG9C,MAAM,GAAGW,MAAM;MAC3B;MACAX,MAAM,GAAGW,MAAM,KAAK,CAAC,GAAGmC,SAAS,GAAG,CAAC,GAAGA,SAAS;IACrD;IAEA,MAAMtD,MAAM,GAAGkD,WAAW,GAAG3C,KAAK,CAACiD,KAAK,CAACF,SAAS,CAAC;IAEnD;IACAJ,WAAW,GAAG,EAAE;IAEhB,OAAOlD,MAAM;EACjB,CAAC;AACL;AAEA;;;;;;;;;;AAUA,OAAM,SAAU4C,eAAeA,CAC3BlD,UAAuB,EACvB+C,OAAe,EACfgB,SAAiB,EACjBzB,IAAY;EAEZ,MAAM0B,WAAW,GAAG,CAACjB,OAAO,GAAGlE,YAAY,CAACoF,aAAa,KAAK,CAAC;EAC/D,MAAMC,UAAU,GAAGnB,OAAO,GAAGlE,YAAY,CAACsF,UAAU;EAEpD;EACA,IAAIH,WAAW,KAAK,CAAC,EAAE;IACnB,OAAOE,UAAU,KAAK,CAAC,IAAI5B,IAAI,KAAK4B,UAAU,GAAGH,SAAS,GAAG,CAAC,CAAC;EACnE;EAEA;EACA,IAAIG,UAAU,EAAE;IACZ,MAAME,KAAK,GAAG9B,IAAI,GAAG4B,UAAU;IAE/B,OAAOE,KAAK,GAAG,CAAC,IAAIA,KAAK,IAAIJ,WAAW,GAClC,CAAC,CAAC,GACFhE,UAAU,CAAC+D,SAAS,GAAGK,KAAK,CAAC,GAAG,CAAC;EAC3C;EAEA;EAEA;EACA,IAAIC,EAAE,GAAGN,SAAS;EAClB,IAAIO,EAAE,GAAGD,EAAE,GAAGL,WAAW,GAAG,CAAC;EAE7B,OAAOK,EAAE,IAAIC,EAAE,EAAE;IACb,MAAMC,GAAG,GAAIF,EAAE,GAAGC,EAAE,KAAM,CAAC;IAC3B,MAAME,QAAQ,GAAGxE,UAAU,CAACuE,GAAG,CAAC;IAEhC,IAAIC,QAAQ,GAAGlC,IAAI,EAAE;MACjB+B,EAAE,GAAGE,GAAG,GAAG,CAAC;IAChB,CAAC,MAAM,IAAIC,QAAQ,GAAGlC,IAAI,EAAE;MACxBgC,EAAE,GAAGC,GAAG,GAAG,CAAC;IAChB,CAAC,MAAM;MACH,OAAOvE,UAAU,CAACuE,GAAG,GAAGP,WAAW,CAAC;IACxC;EACJ;EAEA,OAAO,CAAC,CAAC;AACb;AAEA,MAAMS,WAAW,GAAG,eAAgBlB,UAAU,CAAChF,cAAc,CAAC;AAC9D,MAAMmG,UAAU,GAAG,eAAgBnB,UAAU,CAAC/E,aAAa,CAAC;AAE5D;;;;;;;AAOA,OAAM,SAAUmG,UAAUA,CACtBC,UAAkB,EAClBC,IAAA,GAAqBhF,YAAY,CAACiF,MAAM;EAExC,OAAOL,WAAW,CAACG,UAAU,EAAEC,IAAI,CAAC;AACxC;AAEA;;;;;;AAMA,OAAM,SAAUE,mBAAmBA,CAACC,aAAqB;EACrD,OAAOP,WAAW,CAACO,aAAa,EAAEnF,YAAY,CAACuD,SAAS,CAAC;AAC7D;AAEA;;;;;;AAMA,OAAM,SAAU6B,gBAAgBA,CAACL,UAAkB;EAC/C,OAAOH,WAAW,CAACG,UAAU,EAAE/E,YAAY,CAACa,MAAM,CAAC;AACvD;AAEA;;;;;;AAMA,OAAM,SAAUwE,SAASA,CAACC,SAAiB;EACvC,OAAOT,UAAU,CAACS,SAAS,EAAEtF,YAAY,CAACa,MAAM,CAAC;AACrD;AAEA;AACA,SAASnC,cAAc,QAAQ,iCAAiC;AAChE,SAASC,aAAa,QAAQ,gCAAgC;AAE9D,SACI4G,eAAe,EACf3G,gBAAgB,EAChBC,aAAa,QACV,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}