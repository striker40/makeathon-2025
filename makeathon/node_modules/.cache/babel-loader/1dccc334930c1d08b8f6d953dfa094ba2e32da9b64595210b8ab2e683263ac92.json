{"ast":null,"code":"// Adapted from https://github.com/mathiasbynens/he/blob/36afe179392226cf1b6ccdb16ebbb7a5a844d93a/src/he.js#L106-L134\nvar _a;\nconst decodeMap = new Map([[0, 65533],\n// C1 Unicode control character reference replacements\n[128, 8364], [130, 8218], [131, 402], [132, 8222], [133, 8230], [134, 8224], [135, 8225], [136, 710], [137, 8240], [138, 352], [139, 8249], [140, 338], [142, 381], [145, 8216], [146, 8217], [147, 8220], [148, 8221], [149, 8226], [150, 8211], [151, 8212], [152, 732], [153, 8482], [154, 353], [155, 8250], [156, 339], [158, 382], [159, 376]]);\n/**\r\n * Polyfill for `String.fromCodePoint`. It is used to create a string from a Unicode code point.\r\n */\nexport const fromCodePoint =\n// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, n/no-unsupported-features/es-builtins\n(_a = String.fromCodePoint) !== null && _a !== void 0 ? _a : function (codePoint) {\n  let output = \"\";\n  if (codePoint > 65535) {\n    codePoint -= 65536;\n    output += String.fromCharCode(codePoint >>> 10 & 1023 | 55296);\n    codePoint = 56320 | codePoint & 1023;\n  }\n  output += String.fromCharCode(codePoint);\n  return output;\n};\n/**\r\n * Replace the given code point with a replacement character if it is a\r\n * surrogate or is outside the valid range. Otherwise return the code\r\n * point unchanged.\r\n */\nexport function replaceCodePoint(codePoint) {\n  var _a;\n  if (codePoint >= 55296 && codePoint <= 57343 || codePoint > 1114111) {\n    return 65533;\n  }\n  return (_a = decodeMap.get(codePoint)) !== null && _a !== void 0 ? _a : codePoint;\n}\n/**\r\n * Replace the code point if relevant, then convert it to a string.\r\n *\r\n * @deprecated Use `fromCodePoint(replaceCodePoint(codePoint))` instead.\r\n * @param codePoint The code point to decode.\r\n * @returns The decoded code point.\r\n */\nexport function decodeCodePoint(codePoint) {\n  return fromCodePoint(replaceCodePoint(codePoint));\n}","map":{"version":3,"names":["decodeMap","Map","fromCodePoint","_a","String","codePoint","output","fromCharCode","replaceCodePoint","get","decodeCodePoint"],"sources":["C:\\Users\\smart\\Downloads\\Final Project P20119\\makeathon-2025\\makeathon\\node_modules\\hast-util-raw\\node_modules\\entities\\src\\decode-codepoint.ts"],"sourcesContent":["// Adapted from https://github.com/mathiasbynens/he/blob/36afe179392226cf1b6ccdb16ebbb7a5a844d93a/src/he.js#L106-L134\r\n\r\nconst decodeMap = new Map([\r\n    [0, 65_533],\r\n    // C1 Unicode control character reference replacements\r\n    [128, 8364],\r\n    [130, 8218],\r\n    [131, 402],\r\n    [132, 8222],\r\n    [133, 8230],\r\n    [134, 8224],\r\n    [135, 8225],\r\n    [136, 710],\r\n    [137, 8240],\r\n    [138, 352],\r\n    [139, 8249],\r\n    [140, 338],\r\n    [142, 381],\r\n    [145, 8216],\r\n    [146, 8217],\r\n    [147, 8220],\r\n    [148, 8221],\r\n    [149, 8226],\r\n    [150, 8211],\r\n    [151, 8212],\r\n    [152, 732],\r\n    [153, 8482],\r\n    [154, 353],\r\n    [155, 8250],\r\n    [156, 339],\r\n    [158, 382],\r\n    [159, 376],\r\n]);\r\n\r\n/**\r\n * Polyfill for `String.fromCodePoint`. It is used to create a string from a Unicode code point.\r\n */\r\nexport const fromCodePoint: (...codePoints: number[]) => string =\r\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, n/no-unsupported-features/es-builtins\r\n    String.fromCodePoint ??\r\n    function (codePoint: number): string {\r\n        let output = \"\";\r\n\r\n        if (codePoint > 0xff_ff) {\r\n            codePoint -= 0x1_00_00;\r\n            output += String.fromCharCode(\r\n                ((codePoint >>> 10) & 0x3_ff) | 0xd8_00,\r\n            );\r\n            codePoint = 0xdc_00 | (codePoint & 0x3_ff);\r\n        }\r\n\r\n        output += String.fromCharCode(codePoint);\r\n        return output;\r\n    };\r\n\r\n/**\r\n * Replace the given code point with a replacement character if it is a\r\n * surrogate or is outside the valid range. Otherwise return the code\r\n * point unchanged.\r\n */\r\nexport function replaceCodePoint(codePoint: number): number {\r\n    if (\r\n        (codePoint >= 0xd8_00 && codePoint <= 0xdf_ff) ||\r\n        codePoint > 0x10_ff_ff\r\n    ) {\r\n        return 0xff_fd;\r\n    }\r\n\r\n    return decodeMap.get(codePoint) ?? codePoint;\r\n}\r\n\r\n/**\r\n * Replace the code point if relevant, then convert it to a string.\r\n *\r\n * @deprecated Use `fromCodePoint(replaceCodePoint(codePoint))` instead.\r\n * @param codePoint The code point to decode.\r\n * @returns The decoded code point.\r\n */\r\nexport function decodeCodePoint(codePoint: number): string {\r\n    return fromCodePoint(replaceCodePoint(codePoint));\r\n}\r\n"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAG,IAAIC,GAAG,CAAC,CACtB,CAAC,CAAC,EAAE,KAAM,CAAC;AACX;AACA,CAAC,GAAG,EAAE,IAAI,CAAC,EACX,CAAC,GAAG,EAAE,IAAI,CAAC,EACX,CAAC,GAAG,EAAE,GAAG,CAAC,EACV,CAAC,GAAG,EAAE,IAAI,CAAC,EACX,CAAC,GAAG,EAAE,IAAI,CAAC,EACX,CAAC,GAAG,EAAE,IAAI,CAAC,EACX,CAAC,GAAG,EAAE,IAAI,CAAC,EACX,CAAC,GAAG,EAAE,GAAG,CAAC,EACV,CAAC,GAAG,EAAE,IAAI,CAAC,EACX,CAAC,GAAG,EAAE,GAAG,CAAC,EACV,CAAC,GAAG,EAAE,IAAI,CAAC,EACX,CAAC,GAAG,EAAE,GAAG,CAAC,EACV,CAAC,GAAG,EAAE,GAAG,CAAC,EACV,CAAC,GAAG,EAAE,IAAI,CAAC,EACX,CAAC,GAAG,EAAE,IAAI,CAAC,EACX,CAAC,GAAG,EAAE,IAAI,CAAC,EACX,CAAC,GAAG,EAAE,IAAI,CAAC,EACX,CAAC,GAAG,EAAE,IAAI,CAAC,EACX,CAAC,GAAG,EAAE,IAAI,CAAC,EACX,CAAC,GAAG,EAAE,IAAI,CAAC,EACX,CAAC,GAAG,EAAE,GAAG,CAAC,EACV,CAAC,GAAG,EAAE,IAAI,CAAC,EACX,CAAC,GAAG,EAAE,GAAG,CAAC,EACV,CAAC,GAAG,EAAE,IAAI,CAAC,EACX,CAAC,GAAG,EAAE,GAAG,CAAC,EACV,CAAC,GAAG,EAAE,GAAG,CAAC,EACV,CAAC,GAAG,EAAE,GAAG,CAAC,CACb,CAAC;AAEF;;;AAGA,OAAO,MAAMC,aAAa;AACtB;AACA,CAAAC,EAAA,GAAAC,MAAM,CAACF,aAAa,cAAAC,EAAA,cAAAA,EAAA,GACpB,UAAUE,SAAiB;EACvB,IAAIC,MAAM,GAAG,EAAE;EAEf,IAAID,SAAS,GAAG,KAAO,EAAE;IACrBA,SAAS,IAAI,KAAS;IACtBC,MAAM,IAAIF,MAAM,CAACG,YAAY,CACvBF,SAAS,KAAK,EAAE,GAAI,IAAM,GAAI,KAAO,CAC1C;IACDA,SAAS,GAAG,KAAO,GAAIA,SAAS,GAAG,IAAO;EAC9C;EAEAC,MAAM,IAAIF,MAAM,CAACG,YAAY,CAACF,SAAS,CAAC;EACxC,OAAOC,MAAM;AACjB,CAAC;AAEL;;;;;AAKA,OAAM,SAAUE,gBAAgBA,CAACH,SAAiB;;EAC9C,IACKA,SAAS,IAAI,KAAO,IAAIA,SAAS,IAAI,KAAO,IAC7CA,SAAS,GAAG,OAAU,EACxB;IACE,OAAO,KAAO;EAClB;EAEA,OAAO,CAAAF,EAAA,GAAAH,SAAS,CAACS,GAAG,CAACJ,SAAS,CAAC,cAAAF,EAAA,cAAAA,EAAA,GAAIE,SAAS;AAChD;AAEA;;;;;;;AAOA,OAAM,SAAUK,eAAeA,CAACL,SAAiB;EAC7C,OAAOH,aAAa,CAACM,gBAAgB,CAACH,SAAS,CAAC,CAAC;AACrD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}