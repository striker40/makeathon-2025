{"ast":null,"code":"/**\r\n * @import {\r\n *   Construct,\r\n *   State,\r\n *   TokenizeContext,\r\n *   Tokenizer\r\n * } from 'micromark-util-types'\r\n */\n\nimport { ok as assert } from 'devlop';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { codes, constants, types } from 'micromark-util-symbol';\n\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n};\n\n/** @type {Construct} */\nconst furtherStart = {\n  partial: true,\n  tokenize: tokenizeFurtherStart\n};\n\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\r\n   * Start of code (indented).\r\n   *\r\n   * > **Parsing note**: it is not needed to check if this first line is a\r\n   * > filled line (that it has a non-whitespace character), because blank lines\r\n   * > are parsed already, so we never run into that.\r\n   *\r\n   * ```markdown\r\n   * > |     aaa\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n    assert(markdownSpace(code));\n    effects.enter(types.codeIndented);\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, types.linePrefix, constants.tabSize + 1)(code);\n  }\n\n  /**\r\n   * At start, after 1 or 4 spaces.\r\n   *\r\n   * ```markdown\r\n   * > |     aaa\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === types.linePrefix && tail[2].sliceSerialize(tail[1], true).length >= constants.tabSize ? atBreak(code) : nok(code);\n  }\n\n  /**\r\n   * At a break.\r\n   *\r\n   * ```markdown\r\n   * > |     aaa\r\n   *         ^  ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function atBreak(code) {\n    if (code === codes.eof) {\n      return after(code);\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code);\n    }\n    effects.enter(types.codeFlowValue);\n    return inside(code);\n  }\n\n  /**\r\n   * In code content.\r\n   *\r\n   * ```markdown\r\n   * > |     aaa\r\n   *         ^^^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function inside(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.codeFlowValue);\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return inside;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(types.codeIndented);\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code);\n  }\n}\n\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this;\n  return furtherStart;\n\n  /**\r\n   * At eol, trying to parse another indent.\r\n   *\r\n   * ```markdown\r\n   * > |     aaa\r\n   *            ^\r\n   *   |     bbb\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(types.lineEnding);\n      effects.consume(code);\n      effects.exit(types.lineEnding);\n      return furtherStart;\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, types.linePrefix, constants.tabSize + 1)(code);\n  }\n\n  /**\r\n   * At start, after 1 or 4 spaces.\r\n   *\r\n   * ```markdown\r\n   * > |     aaa\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === types.linePrefix && tail[2].sliceSerialize(tail[1], true).length >= constants.tabSize ? ok(code) : markdownLineEnding(code) ? furtherStart(code) : nok(code);\n  }\n}","map":{"version":3,"names":["ok","assert","factorySpace","markdownLineEnding","markdownSpace","codes","constants","types","codeIndented","name","tokenize","tokenizeCodeIndented","furtherStart","partial","tokenizeFurtherStart","effects","nok","self","start","code","enter","afterPrefix","linePrefix","tabSize","tail","events","length","type","sliceSerialize","atBreak","eof","after","attempt","codeFlowValue","inside","exit","consume","parser","lazy","now","line","lineEnding"],"sources":["C:/Users/smart/Downloads/Final Project P20119/makeathon-2025/makeathon/node_modules/micromark-core-commonmark/dev/lib/code-indented.js"],"sourcesContent":["/**\r\n * @import {\r\n *   Construct,\r\n *   State,\r\n *   TokenizeContext,\r\n *   Tokenizer\r\n * } from 'micromark-util-types'\r\n */\r\n\r\nimport {ok as assert} from 'devlop'\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\r\nimport {codes, constants, types} from 'micromark-util-symbol'\r\n\r\n/** @type {Construct} */\r\nexport const codeIndented = {\r\n  name: 'codeIndented',\r\n  tokenize: tokenizeCodeIndented\r\n}\r\n\r\n/** @type {Construct} */\r\nconst furtherStart = {partial: true, tokenize: tokenizeFurtherStart}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeCodeIndented(effects, ok, nok) {\r\n  const self = this\r\n  return start\r\n\r\n  /**\r\n   * Start of code (indented).\r\n   *\r\n   * > **Parsing note**: it is not needed to check if this first line is a\r\n   * > filled line (that it has a non-whitespace character), because blank lines\r\n   * > are parsed already, so we never run into that.\r\n   *\r\n   * ```markdown\r\n   * > |     aaa\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    // To do: manually check if interrupting like `markdown-rs`.\r\n    assert(markdownSpace(code))\r\n    effects.enter(types.codeIndented)\r\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\r\n    // so that we can drop the next state.\r\n    return factorySpace(\r\n      effects,\r\n      afterPrefix,\r\n      types.linePrefix,\r\n      constants.tabSize + 1\r\n    )(code)\r\n  }\r\n\r\n  /**\r\n   * At start, after 1 or 4 spaces.\r\n   *\r\n   * ```markdown\r\n   * > |     aaa\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function afterPrefix(code) {\r\n    const tail = self.events[self.events.length - 1]\r\n    return tail &&\r\n      tail[1].type === types.linePrefix &&\r\n      tail[2].sliceSerialize(tail[1], true).length >= constants.tabSize\r\n      ? atBreak(code)\r\n      : nok(code)\r\n  }\r\n\r\n  /**\r\n   * At a break.\r\n   *\r\n   * ```markdown\r\n   * > |     aaa\r\n   *         ^  ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function atBreak(code) {\r\n    if (code === codes.eof) {\r\n      return after(code)\r\n    }\r\n\r\n    if (markdownLineEnding(code)) {\r\n      return effects.attempt(furtherStart, atBreak, after)(code)\r\n    }\r\n\r\n    effects.enter(types.codeFlowValue)\r\n    return inside(code)\r\n  }\r\n\r\n  /**\r\n   * In code content.\r\n   *\r\n   * ```markdown\r\n   * > |     aaa\r\n   *         ^^^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function inside(code) {\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      effects.exit(types.codeFlowValue)\r\n      return atBreak(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return inside\r\n  }\r\n\r\n  /** @type {State} */\r\n  function after(code) {\r\n    effects.exit(types.codeIndented)\r\n    // To do: allow interrupting like `markdown-rs`.\r\n    // Feel free to interrupt.\r\n    // tokenizer.interrupt = false\r\n    return ok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeFurtherStart(effects, ok, nok) {\r\n  const self = this\r\n\r\n  return furtherStart\r\n\r\n  /**\r\n   * At eol, trying to parse another indent.\r\n   *\r\n   * ```markdown\r\n   * > |     aaa\r\n   *            ^\r\n   *   |     bbb\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function furtherStart(code) {\r\n    // To do: improve `lazy` / `pierce` handling.\r\n    // If this is a lazy line, it can’t be code.\r\n    if (self.parser.lazy[self.now().line]) {\r\n      return nok(code)\r\n    }\r\n\r\n    if (markdownLineEnding(code)) {\r\n      effects.enter(types.lineEnding)\r\n      effects.consume(code)\r\n      effects.exit(types.lineEnding)\r\n      return furtherStart\r\n    }\r\n\r\n    // To do: the code here in `micromark-js` is a bit different from\r\n    // `markdown-rs` because there it can attempt spaces.\r\n    // We can’t yet.\r\n    //\r\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\r\n    // so that we can drop the next state.\r\n    return factorySpace(\r\n      effects,\r\n      afterPrefix,\r\n      types.linePrefix,\r\n      constants.tabSize + 1\r\n    )(code)\r\n  }\r\n\r\n  /**\r\n   * At start, after 1 or 4 spaces.\r\n   *\r\n   * ```markdown\r\n   * > |     aaa\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function afterPrefix(code) {\r\n    const tail = self.events[self.events.length - 1]\r\n    return tail &&\r\n      tail[1].type === types.linePrefix &&\r\n      tail[2].sliceSerialize(tail[1], true).length >= constants.tabSize\r\n      ? ok(code)\r\n      : markdownLineEnding(code)\r\n        ? furtherStart(code)\r\n        : nok(code)\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}