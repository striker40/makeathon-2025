{"ast":null,"code":"/**\r\n * @import {\r\n *   InitialConstruct,\r\n *   Initializer,\r\n *   State,\r\n *   TokenizeContext,\r\n *   Token\r\n * } from 'micromark-util-types'\r\n */\n\nimport { ok as assert } from 'devlop';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { codes, constants, types } from 'micromark-util-symbol';\n\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n};\n\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Initializer}\r\n *   Content.\r\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);\n  /** @type {Token} */\n  let previous;\n  return contentStart;\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    assert(code === codes.eof || markdownLineEnding(code), 'expected eol or eof');\n    if (code === codes.eof) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(types.lineEnding);\n    effects.consume(code);\n    effects.exit(types.lineEnding);\n    return factorySpace(effects, contentStart, types.linePrefix);\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    assert(code !== codes.eof && !markdownLineEnding(code), 'expected anything other than a line ending or EOF');\n    effects.enter(types.paragraph);\n    return lineStart(code);\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter(types.chunkText, {\n      contentType: constants.contentTypeText,\n      previous\n    });\n    if (previous) {\n      previous.next = token;\n    }\n    previous = token;\n    return data(code);\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === codes.eof) {\n      effects.exit(types.chunkText);\n      effects.exit(types.paragraph);\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      effects.exit(types.chunkText);\n      return lineStart;\n    }\n\n    // Data.\n    effects.consume(code);\n    return data;\n  }\n}","map":{"version":3,"names":["ok","assert","factorySpace","markdownLineEnding","codes","constants","types","content","tokenize","initializeContent","effects","contentStart","attempt","parser","constructs","contentInitial","afterContentStartConstruct","paragraphInitial","previous","code","eof","consume","enter","lineEnding","exit","linePrefix","paragraph","lineStart","token","chunkText","contentType","contentTypeText","next","data"],"sources":["C:/Users/smart/Downloads/Final Project P20119/makeathon-2025/makeathon/node_modules/micromark/dev/lib/initialize/content.js"],"sourcesContent":["/**\r\n * @import {\r\n *   InitialConstruct,\r\n *   Initializer,\r\n *   State,\r\n *   TokenizeContext,\r\n *   Token\r\n * } from 'micromark-util-types'\r\n */\r\n\r\nimport {ok as assert} from 'devlop'\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding} from 'micromark-util-character'\r\nimport {codes, constants, types} from 'micromark-util-symbol'\r\n\r\n/** @type {InitialConstruct} */\r\nexport const content = {tokenize: initializeContent}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Initializer}\r\n *   Content.\r\n */\r\nfunction initializeContent(effects) {\r\n  const contentStart = effects.attempt(\r\n    this.parser.constructs.contentInitial,\r\n    afterContentStartConstruct,\r\n    paragraphInitial\r\n  )\r\n  /** @type {Token} */\r\n  let previous\r\n\r\n  return contentStart\r\n\r\n  /** @type {State} */\r\n  function afterContentStartConstruct(code) {\r\n    assert(\r\n      code === codes.eof || markdownLineEnding(code),\r\n      'expected eol or eof'\r\n    )\r\n\r\n    if (code === codes.eof) {\r\n      effects.consume(code)\r\n      return\r\n    }\r\n\r\n    effects.enter(types.lineEnding)\r\n    effects.consume(code)\r\n    effects.exit(types.lineEnding)\r\n    return factorySpace(effects, contentStart, types.linePrefix)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function paragraphInitial(code) {\r\n    assert(\r\n      code !== codes.eof && !markdownLineEnding(code),\r\n      'expected anything other than a line ending or EOF'\r\n    )\r\n    effects.enter(types.paragraph)\r\n    return lineStart(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function lineStart(code) {\r\n    const token = effects.enter(types.chunkText, {\r\n      contentType: constants.contentTypeText,\r\n      previous\r\n    })\r\n\r\n    if (previous) {\r\n      previous.next = token\r\n    }\r\n\r\n    previous = token\r\n\r\n    return data(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function data(code) {\r\n    if (code === codes.eof) {\r\n      effects.exit(types.chunkText)\r\n      effects.exit(types.paragraph)\r\n      effects.consume(code)\r\n      return\r\n    }\r\n\r\n    if (markdownLineEnding(code)) {\r\n      effects.consume(code)\r\n      effects.exit(types.chunkText)\r\n      return lineStart\r\n    }\r\n\r\n    // Data.\r\n    effects.consume(code)\r\n    return data\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,EAAE,IAAIC,MAAM,QAAO,QAAQ;AACnC,SAAQC,YAAY,QAAO,yBAAyB;AACpD,SAAQC,kBAAkB,QAAO,0BAA0B;AAC3D,SAAQC,KAAK,EAAEC,SAAS,EAAEC,KAAK,QAAO,uBAAuB;;AAE7D;AACA,OAAO,MAAMC,OAAO,GAAG;EAACC,QAAQ,EAAEC;AAAiB,CAAC;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,iBAAiBA,CAACC,OAAO,EAAE;EAClC,MAAMC,YAAY,GAAGD,OAAO,CAACE,OAAO,CAClC,IAAI,CAACC,MAAM,CAACC,UAAU,CAACC,cAAc,EACrCC,0BAA0B,EAC1BC,gBACF,CAAC;EACD;EACA,IAAIC,QAAQ;EAEZ,OAAOP,YAAY;;EAEnB;EACA,SAASK,0BAA0BA,CAACG,IAAI,EAAE;IACxClB,MAAM,CACJkB,IAAI,KAAKf,KAAK,CAACgB,GAAG,IAAIjB,kBAAkB,CAACgB,IAAI,CAAC,EAC9C,qBACF,CAAC;IAED,IAAIA,IAAI,KAAKf,KAAK,CAACgB,GAAG,EAAE;MACtBV,OAAO,CAACW,OAAO,CAACF,IAAI,CAAC;MACrB;IACF;IAEAT,OAAO,CAACY,KAAK,CAAChB,KAAK,CAACiB,UAAU,CAAC;IAC/Bb,OAAO,CAACW,OAAO,CAACF,IAAI,CAAC;IACrBT,OAAO,CAACc,IAAI,CAAClB,KAAK,CAACiB,UAAU,CAAC;IAC9B,OAAOrB,YAAY,CAACQ,OAAO,EAAEC,YAAY,EAAEL,KAAK,CAACmB,UAAU,CAAC;EAC9D;;EAEA;EACA,SAASR,gBAAgBA,CAACE,IAAI,EAAE;IAC9BlB,MAAM,CACJkB,IAAI,KAAKf,KAAK,CAACgB,GAAG,IAAI,CAACjB,kBAAkB,CAACgB,IAAI,CAAC,EAC/C,mDACF,CAAC;IACDT,OAAO,CAACY,KAAK,CAAChB,KAAK,CAACoB,SAAS,CAAC;IAC9B,OAAOC,SAAS,CAACR,IAAI,CAAC;EACxB;;EAEA;EACA,SAASQ,SAASA,CAACR,IAAI,EAAE;IACvB,MAAMS,KAAK,GAAGlB,OAAO,CAACY,KAAK,CAAChB,KAAK,CAACuB,SAAS,EAAE;MAC3CC,WAAW,EAAEzB,SAAS,CAAC0B,eAAe;MACtCb;IACF,CAAC,CAAC;IAEF,IAAIA,QAAQ,EAAE;MACZA,QAAQ,CAACc,IAAI,GAAGJ,KAAK;IACvB;IAEAV,QAAQ,GAAGU,KAAK;IAEhB,OAAOK,IAAI,CAACd,IAAI,CAAC;EACnB;;EAEA;EACA,SAASc,IAAIA,CAACd,IAAI,EAAE;IAClB,IAAIA,IAAI,KAAKf,KAAK,CAACgB,GAAG,EAAE;MACtBV,OAAO,CAACc,IAAI,CAAClB,KAAK,CAACuB,SAAS,CAAC;MAC7BnB,OAAO,CAACc,IAAI,CAAClB,KAAK,CAACoB,SAAS,CAAC;MAC7BhB,OAAO,CAACW,OAAO,CAACF,IAAI,CAAC;MACrB;IACF;IAEA,IAAIhB,kBAAkB,CAACgB,IAAI,CAAC,EAAE;MAC5BT,OAAO,CAACW,OAAO,CAACF,IAAI,CAAC;MACrBT,OAAO,CAACc,IAAI,CAAClB,KAAK,CAACuB,SAAS,CAAC;MAC7B,OAAOF,SAAS;IAClB;;IAEA;IACAjB,OAAO,CAACW,OAAO,CAACF,IAAI,CAAC;IACrB,OAAOc,IAAI;EACb;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}