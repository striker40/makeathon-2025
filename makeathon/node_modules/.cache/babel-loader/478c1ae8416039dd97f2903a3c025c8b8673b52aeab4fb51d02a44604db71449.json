{"ast":null,"code":"/**\r\n * @import {ElementContent, Element, RootData, Root} from 'hast'\r\n * @import {Emitter, HLJSOptions as HljsOptions, HighlightResult, LanguageFn} from 'highlight.js'\r\n */\n\n/**\r\n * @typedef {Object} ExtraOptions\r\n *   Extra fields.\r\n * @property {ReadonlyArray<string> | null | undefined} [subset]\r\n *   List of allowed languages (default: all registered languages).\r\n *\r\n * @typedef Options\r\n *   Configuration for `highlight`.\r\n * @property {string | null | undefined} [prefix='hljs-']\r\n *   Class prefix (default: `'hljs-'`).\r\n *\r\n * @typedef {Options & ExtraOptions} AutoOptions\r\n *   Configuration for `highlightAuto`.\r\n */\n\nimport { ok as assert } from 'devlop';\nimport HighlightJs from 'highlight.js/lib/core';\n\n/** @type {AutoOptions} */\nconst emptyOptions = {};\nconst defaultPrefix = 'hljs-';\n\n/**\r\n * Create a `lowlight` instance.\r\n *\r\n * @param {Readonly<Record<string, LanguageFn>> | null | undefined} [grammars]\r\n *   Grammars to add (optional).\r\n * @returns\r\n *   Lowlight.\r\n */\nexport function createLowlight(grammars) {\n  const high = HighlightJs.newInstance();\n  if (grammars) {\n    register(grammars);\n  }\n  return {\n    highlight,\n    highlightAuto,\n    listLanguages,\n    register,\n    registerAlias,\n    registered\n  };\n\n  /**\r\n   * Highlight `value` (code) as `language` (name).\r\n   *\r\n   * @example\r\n   *   ```js\r\n   *   import {common, createLowlight} from 'lowlight'\r\n   *\r\n   *   const lowlight = createLowlight(common)\r\n   *\r\n   *   console.log(lowlight.highlight('css', 'em { color: red }'))\r\n   *   ```\r\n   *\r\n   *   Yields:\r\n   *\r\n   *   ```js\r\n   *   {type: 'root', children: [Array], data: {language: 'css', relevance: 3}}\r\n   *   ```\r\n   *\r\n   * @param {string} language\r\n   *   Programming language name.\r\n   * @param {string} value\r\n   *   Code to highlight.\r\n   * @param {Readonly<Options> | null | undefined} [options={}]\r\n   *   Configuration (optional).\r\n   * @returns {Root}\r\n   *   Tree; with the following `data` fields: `language` (`string`), detected\r\n   *   programming language name; `relevance` (`number`), how sure lowlight is\r\n   *   that the given code is in the language.\r\n   */\n  function highlight(language, value, options) {\n    assert(typeof language === 'string', 'expected `string` as `name`');\n    assert(typeof value === 'string', 'expected `string` as `value`');\n    const settings = options || emptyOptions;\n    const prefix = typeof settings.prefix === 'string' ? settings.prefix : defaultPrefix;\n    if (!high.getLanguage(language)) {\n      throw new Error('Unknown language: `' + language + '` is not registered');\n    }\n\n    // See: <https://github.com/highlightjs/highlight.js/issues/3621#issuecomment-1528841888>\n    high.configure({\n      __emitter: HastEmitter,\n      classPrefix: prefix\n    });\n    const result = /** @type {HighlightResult & {_emitter: HastEmitter}} */\n    high.highlight(value, {\n      ignoreIllegals: true,\n      language\n    });\n\n    // `highlight.js` seems to use this (currently) for broken grammars, so let’s\n    // keep it in there just to be sure.\n    /* c8 ignore next 5 */\n    if (result.errorRaised) {\n      throw new Error('Could not highlight with `Highlight.js`', {\n        cause: result.errorRaised\n      });\n    }\n    const root = result._emitter.root;\n\n    // Cast because it is always defined.\n    const data = /** @type {RootData} */root.data;\n    data.language = result.language;\n    data.relevance = result.relevance;\n    return root;\n  }\n\n  /**\r\n   * Highlight `value` (code) and guess its programming language.\r\n   *\r\n   * @example\r\n   *   ```js\r\n   *   import {common, createLowlight} from 'lowlight'\r\n   *\r\n   *   const lowlight = createLowlight(common)\r\n   *\r\n   *   console.log(lowlight.highlightAuto('\"hello, \" + name + \"!\"'))\r\n   *   ```\r\n   *\r\n   *   Yields:\r\n   *\r\n   *   ```js\r\n   *   {type: 'root', children: [Array], data: {language: 'arduino', relevance: 2}}\r\n   *   ```\r\n   *\r\n   * @param {string} value\r\n   *   Code to highlight.\r\n   * @param {Readonly<AutoOptions> | null | undefined} [options={}]\r\n   *   Configuration (optional).\r\n   * @returns {Root}\r\n   *   Tree; with the following `data` fields: `language` (`string`), detected\r\n   *   programming language name; `relevance` (`number`), how sure lowlight is\r\n   *   that the given code is in the language.\r\n   */\n  function highlightAuto(value, options) {\n    assert(typeof value === 'string', 'expected `string` as `value`');\n    const settings = options || emptyOptions;\n    const subset = settings.subset || listLanguages();\n    let index = -1;\n    let relevance = 0;\n    /** @type {Root | undefined} */\n    let result;\n    while (++index < subset.length) {\n      const name = subset[index];\n      if (!high.getLanguage(name)) continue;\n      const current = highlight(name, value, options);\n      if (current.data && current.data.relevance !== undefined && current.data.relevance > relevance) {\n        relevance = current.data.relevance;\n        result = current;\n      }\n    }\n    return result || {\n      type: 'root',\n      children: [],\n      data: {\n        language: undefined,\n        relevance\n      }\n    };\n  }\n\n  /**\r\n   * List registered languages.\r\n   *\r\n   * @example\r\n   *   ```js\r\n   *   import {createLowlight} from 'lowlight'\r\n   *   import markdown from 'highlight.js/lib/languages/markdown'\r\n   *\r\n   *   const lowlight = createLowlight()\r\n   *\r\n   *   console.log(lowlight.listLanguages()) // => []\r\n   *\r\n   *   lowlight.register({markdown})\r\n   *\r\n   *   console.log(lowlight.listLanguages()) // => ['markdown']\r\n   *   ```\r\n   *\r\n   * @returns {Array<string>}\r\n   *   Names of registered language.\r\n   */\n  function listLanguages() {\n    return high.listLanguages();\n  }\n\n  /**\r\n   * Register languages.\r\n   *\r\n   * @example\r\n   *   ```js\r\n   *   import {createLowlight} from 'lowlight'\r\n   *   import xml from 'highlight.js/lib/languages/xml'\r\n   *\r\n   *   const lowlight = createLowlight()\r\n   *\r\n   *   lowlight.register({xml})\r\n   *\r\n   *   // Note: `html` is an alias for `xml`.\r\n   *   console.log(lowlight.highlight('html', '<em>Emphasis</em>'))\r\n   *   ```\r\n   *\r\n   *   Yields:\r\n   *\r\n   *   ```js\r\n   *   {type: 'root', children: [Array], data: {language: 'html', relevance: 2}}\r\n   *   ```\r\n   *\r\n   * @overload\r\n   * @param {Readonly<Record<string, LanguageFn>>} grammars\r\n   * @returns {undefined}\r\n   *\r\n   * @overload\r\n   * @param {string} name\r\n   * @param {LanguageFn} grammar\r\n   * @returns {undefined}\r\n   *\r\n   * @param {Readonly<Record<string, LanguageFn>> | string} grammarsOrName\r\n   *   Grammars or programming language name.\r\n   * @param {LanguageFn | undefined} [grammar]\r\n   *   Grammar, if with name.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\n  function register(grammarsOrName, grammar) {\n    if (typeof grammarsOrName === 'string') {\n      assert(grammar !== undefined, 'expected `grammar`');\n      high.registerLanguage(grammarsOrName, grammar);\n    } else {\n      /** @type {string} */\n      let name;\n      for (name in grammarsOrName) {\n        if (Object.hasOwn(grammarsOrName, name)) {\n          high.registerLanguage(name, grammarsOrName[name]);\n        }\n      }\n    }\n  }\n\n  /**\r\n   * Register aliases.\r\n   *\r\n   * @example\r\n   *   ```js\r\n   *   import {createLowlight} from 'lowlight'\r\n   *   import markdown from 'highlight.js/lib/languages/markdown'\r\n   *\r\n   *   const lowlight = createLowlight()\r\n   *\r\n   *   lowlight.register({markdown})\r\n   *\r\n   *   // lowlight.highlight('mdown', '<em>Emphasis</em>')\r\n   *   // ^ would throw: Error: Unknown language: `mdown` is not registered\r\n   *\r\n   *   lowlight.registerAlias({markdown: ['mdown', 'mkdn', 'mdwn', 'ron']})\r\n   *   lowlight.highlight('mdown', '<em>Emphasis</em>')\r\n   *   // ^ Works!\r\n   *   ```\r\n   *\r\n   * @overload\r\n   * @param {Readonly<Record<string, ReadonlyArray<string> | string>>} aliases\r\n   * @returns {undefined}\r\n   *\r\n   * @overload\r\n   * @param {string} language\r\n   * @param {ReadonlyArray<string> | string} alias\r\n   * @returns {undefined}\r\n   *\r\n   * @param {Readonly<Record<string, ReadonlyArray<string> | string>> | string} aliasesOrName\r\n   *   Map of programming language names to one or more aliases, or programming\r\n   *   language name.\r\n   * @param {ReadonlyArray<string> | string | undefined} [alias]\r\n   *   One or more aliases for the programming language, if with `name`.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\n  function registerAlias(aliasesOrName, alias) {\n    if (typeof aliasesOrName === 'string') {\n      assert(alias !== undefined);\n      high.registerAliases(\n      // Note: copy needed because hljs doesn’t accept readonly arrays yet.\n      typeof alias === 'string' ? alias : [...alias], {\n        languageName: aliasesOrName\n      });\n    } else {\n      /** @type {string} */\n      let key;\n      for (key in aliasesOrName) {\n        if (Object.hasOwn(aliasesOrName, key)) {\n          const aliases = aliasesOrName[key];\n          high.registerAliases(\n          // Note: copy needed because hljs doesn’t accept readonly arrays yet.\n          typeof aliases === 'string' ? aliases : [...aliases], {\n            languageName: key\n          });\n        }\n      }\n    }\n  }\n\n  /**\r\n   * Check whether an alias or name is registered.\r\n   *\r\n   * @example\r\n   *   ```js\r\n   *   import {createLowlight} from 'lowlight'\r\n   *   import javascript from 'highlight.js/lib/languages/javascript'\r\n   *\r\n   *   const lowlight = createLowlight({javascript})\r\n   *\r\n   *   console.log(lowlight.registered('funkyscript')) // => `false`\r\n   *\r\n   *   lowlight.registerAlias({javascript: 'funkyscript'})\r\n   *   console.log(lowlight.registered('funkyscript')) // => `true`\r\n   *   ```\r\n   *\r\n   * @param {string} aliasOrName\r\n   *   Name of a language or alias for one.\r\n   * @returns {boolean}\r\n   *   Whether `aliasOrName` is registered.\r\n   */\n  function registered(aliasOrName) {\n    return Boolean(high.getLanguage(aliasOrName));\n  }\n}\n\n/** @type {Emitter} */\nclass HastEmitter {\n  /**\r\n   * @param {Readonly<HljsOptions>} options\r\n   *   Configuration.\r\n   * @returns\r\n   *   Instance.\r\n   */\n  constructor(options) {\n    /** @type {HljsOptions} */\n    this.options = options;\n    /** @type {Root} */\n    this.root = {\n      type: 'root',\n      children: [],\n      data: {\n        language: undefined,\n        relevance: 0\n      }\n    };\n    /** @type {[Root, ...Array<Element>]} */\n    this.stack = [this.root];\n  }\n\n  /**\r\n   * @param {string} value\r\n   *   Text to add.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   *\r\n   */\n  addText(value) {\n    if (value === '') return;\n    const current = this.stack[this.stack.length - 1];\n    const tail = current.children[current.children.length - 1];\n    if (tail && tail.type === 'text') {\n      tail.value += value;\n    } else {\n      current.children.push({\n        type: 'text',\n        value\n      });\n    }\n  }\n\n  /**\r\n   *\r\n   * @param {unknown} rawName\r\n   *   Name to add.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\n  startScope(rawName) {\n    this.openNode(String(rawName));\n  }\n\n  /**\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\n  endScope() {\n    this.closeNode();\n  }\n\n  /**\r\n   * @param {HastEmitter} other\r\n   *   Other emitter.\r\n   * @param {string} name\r\n   *   Name of the sublanguage.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\n  __addSublanguage(other, name) {\n    const current = this.stack[this.stack.length - 1];\n    // Assume only element content.\n    const results = /** @type {Array<ElementContent>} */other.root.children;\n    if (name) {\n      current.children.push({\n        type: 'element',\n        tagName: 'span',\n        properties: {\n          className: [name]\n        },\n        children: results\n      });\n    } else {\n      current.children.push(...results);\n    }\n  }\n\n  /**\r\n   * @param {string} name\r\n   *   Name to add.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\n  openNode(name) {\n    const self = this;\n    // First “class” gets the prefix. Rest gets a repeated underscore suffix.\n    // See: <https://github.com/highlightjs/highlight.js/commit/51806aa>\n    // See: <https://github.com/wooorm/lowlight/issues/43>\n    const className = name.split('.').map(function (d, i) {\n      return i ? d + '_'.repeat(i) : self.options.classPrefix + d;\n    });\n    const current = this.stack[this.stack.length - 1];\n    /** @type {Element} */\n    const child = {\n      type: 'element',\n      tagName: 'span',\n      properties: {\n        className\n      },\n      children: []\n    };\n    current.children.push(child);\n    this.stack.push(child);\n  }\n\n  /**\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\n  closeNode() {\n    this.stack.pop();\n  }\n\n  /**\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\n  finalize() {}\n\n  /**\r\n   * @returns {string}\r\n   *   Nothing.\r\n   */\n  toHTML() {\n    return '';\n  }\n}","map":{"version":3,"names":["ok","assert","HighlightJs","emptyOptions","defaultPrefix","createLowlight","grammars","high","newInstance","register","highlight","highlightAuto","listLanguages","registerAlias","registered","language","value","options","settings","prefix","getLanguage","Error","configure","__emitter","HastEmitter","classPrefix","result","ignoreIllegals","errorRaised","cause","root","_emitter","data","relevance","subset","index","length","name","current","undefined","type","children","grammarsOrName","grammar","registerLanguage","Object","hasOwn","aliasesOrName","alias","registerAliases","languageName","key","aliases","aliasOrName","Boolean","constructor","stack","addText","tail","push","startScope","rawName","openNode","String","endScope","closeNode","__addSublanguage","other","results","tagName","properties","className","self","split","map","d","i","repeat","child","pop","finalize","toHTML"],"sources":["C:/Users/smart/Downloads/Final Project P20119/makeathon-2025/makeathon/node_modules/lowlight/lib/index.js"],"sourcesContent":["/**\r\n * @import {ElementContent, Element, RootData, Root} from 'hast'\r\n * @import {Emitter, HLJSOptions as HljsOptions, HighlightResult, LanguageFn} from 'highlight.js'\r\n */\r\n\r\n/**\r\n * @typedef {Object} ExtraOptions\r\n *   Extra fields.\r\n * @property {ReadonlyArray<string> | null | undefined} [subset]\r\n *   List of allowed languages (default: all registered languages).\r\n *\r\n * @typedef Options\r\n *   Configuration for `highlight`.\r\n * @property {string | null | undefined} [prefix='hljs-']\r\n *   Class prefix (default: `'hljs-'`).\r\n *\r\n * @typedef {Options & ExtraOptions} AutoOptions\r\n *   Configuration for `highlightAuto`.\r\n */\r\n\r\nimport {ok as assert} from 'devlop'\r\nimport HighlightJs from 'highlight.js/lib/core'\r\n\r\n/** @type {AutoOptions} */\r\nconst emptyOptions = {}\r\n\r\nconst defaultPrefix = 'hljs-'\r\n\r\n/**\r\n * Create a `lowlight` instance.\r\n *\r\n * @param {Readonly<Record<string, LanguageFn>> | null | undefined} [grammars]\r\n *   Grammars to add (optional).\r\n * @returns\r\n *   Lowlight.\r\n */\r\nexport function createLowlight(grammars) {\r\n  const high = HighlightJs.newInstance()\r\n\r\n  if (grammars) {\r\n    register(grammars)\r\n  }\r\n\r\n  return {\r\n    highlight,\r\n    highlightAuto,\r\n    listLanguages,\r\n    register,\r\n    registerAlias,\r\n    registered\r\n  }\r\n\r\n  /**\r\n   * Highlight `value` (code) as `language` (name).\r\n   *\r\n   * @example\r\n   *   ```js\r\n   *   import {common, createLowlight} from 'lowlight'\r\n   *\r\n   *   const lowlight = createLowlight(common)\r\n   *\r\n   *   console.log(lowlight.highlight('css', 'em { color: red }'))\r\n   *   ```\r\n   *\r\n   *   Yields:\r\n   *\r\n   *   ```js\r\n   *   {type: 'root', children: [Array], data: {language: 'css', relevance: 3}}\r\n   *   ```\r\n   *\r\n   * @param {string} language\r\n   *   Programming language name.\r\n   * @param {string} value\r\n   *   Code to highlight.\r\n   * @param {Readonly<Options> | null | undefined} [options={}]\r\n   *   Configuration (optional).\r\n   * @returns {Root}\r\n   *   Tree; with the following `data` fields: `language` (`string`), detected\r\n   *   programming language name; `relevance` (`number`), how sure lowlight is\r\n   *   that the given code is in the language.\r\n   */\r\n  function highlight(language, value, options) {\r\n    assert(typeof language === 'string', 'expected `string` as `name`')\r\n    assert(typeof value === 'string', 'expected `string` as `value`')\r\n    const settings = options || emptyOptions\r\n    const prefix =\r\n      typeof settings.prefix === 'string' ? settings.prefix : defaultPrefix\r\n\r\n    if (!high.getLanguage(language)) {\r\n      throw new Error('Unknown language: `' + language + '` is not registered')\r\n    }\r\n\r\n    // See: <https://github.com/highlightjs/highlight.js/issues/3621#issuecomment-1528841888>\r\n    high.configure({__emitter: HastEmitter, classPrefix: prefix})\r\n\r\n    const result = /** @type {HighlightResult & {_emitter: HastEmitter}} */ (\r\n      high.highlight(value, {ignoreIllegals: true, language})\r\n    )\r\n\r\n    // `highlight.js` seems to use this (currently) for broken grammars, so let’s\r\n    // keep it in there just to be sure.\r\n    /* c8 ignore next 5 */\r\n    if (result.errorRaised) {\r\n      throw new Error('Could not highlight with `Highlight.js`', {\r\n        cause: result.errorRaised\r\n      })\r\n    }\r\n\r\n    const root = result._emitter.root\r\n\r\n    // Cast because it is always defined.\r\n    const data = /** @type {RootData} */ (root.data)\r\n\r\n    data.language = result.language\r\n    data.relevance = result.relevance\r\n\r\n    return root\r\n  }\r\n\r\n  /**\r\n   * Highlight `value` (code) and guess its programming language.\r\n   *\r\n   * @example\r\n   *   ```js\r\n   *   import {common, createLowlight} from 'lowlight'\r\n   *\r\n   *   const lowlight = createLowlight(common)\r\n   *\r\n   *   console.log(lowlight.highlightAuto('\"hello, \" + name + \"!\"'))\r\n   *   ```\r\n   *\r\n   *   Yields:\r\n   *\r\n   *   ```js\r\n   *   {type: 'root', children: [Array], data: {language: 'arduino', relevance: 2}}\r\n   *   ```\r\n   *\r\n   * @param {string} value\r\n   *   Code to highlight.\r\n   * @param {Readonly<AutoOptions> | null | undefined} [options={}]\r\n   *   Configuration (optional).\r\n   * @returns {Root}\r\n   *   Tree; with the following `data` fields: `language` (`string`), detected\r\n   *   programming language name; `relevance` (`number`), how sure lowlight is\r\n   *   that the given code is in the language.\r\n   */\r\n  function highlightAuto(value, options) {\r\n    assert(typeof value === 'string', 'expected `string` as `value`')\r\n    const settings = options || emptyOptions\r\n    const subset = settings.subset || listLanguages()\r\n\r\n    let index = -1\r\n    let relevance = 0\r\n    /** @type {Root | undefined} */\r\n    let result\r\n\r\n    while (++index < subset.length) {\r\n      const name = subset[index]\r\n\r\n      if (!high.getLanguage(name)) continue\r\n\r\n      const current = highlight(name, value, options)\r\n\r\n      if (\r\n        current.data &&\r\n        current.data.relevance !== undefined &&\r\n        current.data.relevance > relevance\r\n      ) {\r\n        relevance = current.data.relevance\r\n        result = current\r\n      }\r\n    }\r\n\r\n    return (\r\n      result || {\r\n        type: 'root',\r\n        children: [],\r\n        data: {language: undefined, relevance}\r\n      }\r\n    )\r\n  }\r\n\r\n  /**\r\n   * List registered languages.\r\n   *\r\n   * @example\r\n   *   ```js\r\n   *   import {createLowlight} from 'lowlight'\r\n   *   import markdown from 'highlight.js/lib/languages/markdown'\r\n   *\r\n   *   const lowlight = createLowlight()\r\n   *\r\n   *   console.log(lowlight.listLanguages()) // => []\r\n   *\r\n   *   lowlight.register({markdown})\r\n   *\r\n   *   console.log(lowlight.listLanguages()) // => ['markdown']\r\n   *   ```\r\n   *\r\n   * @returns {Array<string>}\r\n   *   Names of registered language.\r\n   */\r\n  function listLanguages() {\r\n    return high.listLanguages()\r\n  }\r\n\r\n  /**\r\n   * Register languages.\r\n   *\r\n   * @example\r\n   *   ```js\r\n   *   import {createLowlight} from 'lowlight'\r\n   *   import xml from 'highlight.js/lib/languages/xml'\r\n   *\r\n   *   const lowlight = createLowlight()\r\n   *\r\n   *   lowlight.register({xml})\r\n   *\r\n   *   // Note: `html` is an alias for `xml`.\r\n   *   console.log(lowlight.highlight('html', '<em>Emphasis</em>'))\r\n   *   ```\r\n   *\r\n   *   Yields:\r\n   *\r\n   *   ```js\r\n   *   {type: 'root', children: [Array], data: {language: 'html', relevance: 2}}\r\n   *   ```\r\n   *\r\n   * @overload\r\n   * @param {Readonly<Record<string, LanguageFn>>} grammars\r\n   * @returns {undefined}\r\n   *\r\n   * @overload\r\n   * @param {string} name\r\n   * @param {LanguageFn} grammar\r\n   * @returns {undefined}\r\n   *\r\n   * @param {Readonly<Record<string, LanguageFn>> | string} grammarsOrName\r\n   *   Grammars or programming language name.\r\n   * @param {LanguageFn | undefined} [grammar]\r\n   *   Grammar, if with name.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  function register(grammarsOrName, grammar) {\r\n    if (typeof grammarsOrName === 'string') {\r\n      assert(grammar !== undefined, 'expected `grammar`')\r\n      high.registerLanguage(grammarsOrName, grammar)\r\n    } else {\r\n      /** @type {string} */\r\n      let name\r\n\r\n      for (name in grammarsOrName) {\r\n        if (Object.hasOwn(grammarsOrName, name)) {\r\n          high.registerLanguage(name, grammarsOrName[name])\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register aliases.\r\n   *\r\n   * @example\r\n   *   ```js\r\n   *   import {createLowlight} from 'lowlight'\r\n   *   import markdown from 'highlight.js/lib/languages/markdown'\r\n   *\r\n   *   const lowlight = createLowlight()\r\n   *\r\n   *   lowlight.register({markdown})\r\n   *\r\n   *   // lowlight.highlight('mdown', '<em>Emphasis</em>')\r\n   *   // ^ would throw: Error: Unknown language: `mdown` is not registered\r\n   *\r\n   *   lowlight.registerAlias({markdown: ['mdown', 'mkdn', 'mdwn', 'ron']})\r\n   *   lowlight.highlight('mdown', '<em>Emphasis</em>')\r\n   *   // ^ Works!\r\n   *   ```\r\n   *\r\n   * @overload\r\n   * @param {Readonly<Record<string, ReadonlyArray<string> | string>>} aliases\r\n   * @returns {undefined}\r\n   *\r\n   * @overload\r\n   * @param {string} language\r\n   * @param {ReadonlyArray<string> | string} alias\r\n   * @returns {undefined}\r\n   *\r\n   * @param {Readonly<Record<string, ReadonlyArray<string> | string>> | string} aliasesOrName\r\n   *   Map of programming language names to one or more aliases, or programming\r\n   *   language name.\r\n   * @param {ReadonlyArray<string> | string | undefined} [alias]\r\n   *   One or more aliases for the programming language, if with `name`.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  function registerAlias(aliasesOrName, alias) {\r\n    if (typeof aliasesOrName === 'string') {\r\n      assert(alias !== undefined)\r\n      high.registerAliases(\r\n        // Note: copy needed because hljs doesn’t accept readonly arrays yet.\r\n        typeof alias === 'string' ? alias : [...alias],\r\n        {languageName: aliasesOrName}\r\n      )\r\n    } else {\r\n      /** @type {string} */\r\n      let key\r\n\r\n      for (key in aliasesOrName) {\r\n        if (Object.hasOwn(aliasesOrName, key)) {\r\n          const aliases = aliasesOrName[key]\r\n          high.registerAliases(\r\n            // Note: copy needed because hljs doesn’t accept readonly arrays yet.\r\n            typeof aliases === 'string' ? aliases : [...aliases],\r\n            {languageName: key}\r\n          )\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check whether an alias or name is registered.\r\n   *\r\n   * @example\r\n   *   ```js\r\n   *   import {createLowlight} from 'lowlight'\r\n   *   import javascript from 'highlight.js/lib/languages/javascript'\r\n   *\r\n   *   const lowlight = createLowlight({javascript})\r\n   *\r\n   *   console.log(lowlight.registered('funkyscript')) // => `false`\r\n   *\r\n   *   lowlight.registerAlias({javascript: 'funkyscript'})\r\n   *   console.log(lowlight.registered('funkyscript')) // => `true`\r\n   *   ```\r\n   *\r\n   * @param {string} aliasOrName\r\n   *   Name of a language or alias for one.\r\n   * @returns {boolean}\r\n   *   Whether `aliasOrName` is registered.\r\n   */\r\n  function registered(aliasOrName) {\r\n    return Boolean(high.getLanguage(aliasOrName))\r\n  }\r\n}\r\n\r\n/** @type {Emitter} */\r\nclass HastEmitter {\r\n  /**\r\n   * @param {Readonly<HljsOptions>} options\r\n   *   Configuration.\r\n   * @returns\r\n   *   Instance.\r\n   */\r\n  constructor(options) {\r\n    /** @type {HljsOptions} */\r\n    this.options = options\r\n    /** @type {Root} */\r\n    this.root = {\r\n      type: 'root',\r\n      children: [],\r\n      data: {language: undefined, relevance: 0}\r\n    }\r\n    /** @type {[Root, ...Array<Element>]} */\r\n    this.stack = [this.root]\r\n  }\r\n\r\n  /**\r\n   * @param {string} value\r\n   *   Text to add.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   *\r\n   */\r\n  addText(value) {\r\n    if (value === '') return\r\n\r\n    const current = this.stack[this.stack.length - 1]\r\n    const tail = current.children[current.children.length - 1]\r\n\r\n    if (tail && tail.type === 'text') {\r\n      tail.value += value\r\n    } else {\r\n      current.children.push({type: 'text', value})\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {unknown} rawName\r\n   *   Name to add.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  startScope(rawName) {\r\n    this.openNode(String(rawName))\r\n  }\r\n\r\n  /**\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  endScope() {\r\n    this.closeNode()\r\n  }\r\n\r\n  /**\r\n   * @param {HastEmitter} other\r\n   *   Other emitter.\r\n   * @param {string} name\r\n   *   Name of the sublanguage.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  __addSublanguage(other, name) {\r\n    const current = this.stack[this.stack.length - 1]\r\n    // Assume only element content.\r\n    const results = /** @type {Array<ElementContent>} */ (other.root.children)\r\n\r\n    if (name) {\r\n      current.children.push({\r\n        type: 'element',\r\n        tagName: 'span',\r\n        properties: {className: [name]},\r\n        children: results\r\n      })\r\n    } else {\r\n      current.children.push(...results)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {string} name\r\n   *   Name to add.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  openNode(name) {\r\n    const self = this\r\n    // First “class” gets the prefix. Rest gets a repeated underscore suffix.\r\n    // See: <https://github.com/highlightjs/highlight.js/commit/51806aa>\r\n    // See: <https://github.com/wooorm/lowlight/issues/43>\r\n    const className = name.split('.').map(function (d, i) {\r\n      return i ? d + '_'.repeat(i) : self.options.classPrefix + d\r\n    })\r\n    const current = this.stack[this.stack.length - 1]\r\n    /** @type {Element} */\r\n    const child = {\r\n      type: 'element',\r\n      tagName: 'span',\r\n      properties: {className},\r\n      children: []\r\n    }\r\n\r\n    current.children.push(child)\r\n    this.stack.push(child)\r\n  }\r\n\r\n  /**\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  closeNode() {\r\n    this.stack.pop()\r\n  }\r\n\r\n  /**\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  finalize() {}\r\n\r\n  /**\r\n   * @returns {string}\r\n   *   Nothing.\r\n   */\r\n  toHTML() {\r\n    return ''\r\n  }\r\n}\r\n"],"mappings":"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ClCP,MAAM,GAAGY,OAAO;MAClB;IACF;IAEA,OACEZ,MAAM,IAAI;MACRc,IAAI,EAAE,MAAM;MACZC,QAAQ,EAAE,EAAE;MACZT,IAAI,EAAE;QAACjB,QAAQ,EAAEwB,SAAS;QAAEN;MAAS;IACvC,CAAC;EAEL;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASrB,aAAaA,CAAA,EAAG;IACvB,OAAOL,IAAI,CAACK,aAAa,CAAC,CAAC;EAC7B;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASH,QAAQA,CAACiC,cAAc,EAAEC,OAAO,EAAE;IACzC,IAAI,OAAOD,cAAc,KAAK,QAAQ,EAAE;MACtCzC,MAAM,CAAC0C,OAAO,KAAKJ,SAAS,EAAE,oBAAoB,CAAC;MACnDhC,IAAI,CAACqC,gBAAgB,CAACF,cAAc,EAAEC,OAAO,CAAC;IAChD,CAAC,MAAM;MACL;MACA,IAAIN,IAAI;MAER,KAAKA,IAAI,IAAIK,cAAc,EAAE;QAC3B,IAAIG,MAAM,CAACC,MAAM,CAACJ,cAAc,EAAEL,IAAI,CAAC,EAAE;UACvC9B,IAAI,CAACqC,gBAAgB,CAACP,IAAI,EAAEK,cAAc,CAACL,IAAI,CAAC,CAAC;QACnD;MACF;IACF;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASxB,aAAaA,CAACkC,aAAa,EAAEC,KAAK,EAAE;IAC3C,IAAI,OAAOD,aAAa,KAAK,QAAQ,E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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}