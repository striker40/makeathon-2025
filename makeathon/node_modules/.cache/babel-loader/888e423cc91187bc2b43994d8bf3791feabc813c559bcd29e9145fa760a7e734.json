{"ast":null,"code":"/**\r\n * @import {\r\n *   Construct,\r\n *   State,\r\n *   TokenizeContext,\r\n *   Tokenizer\r\n * } from 'micromark-util-types'\r\n */\n\nimport { ok as assert } from 'devlop';\nimport { codes, types } from 'micromark-util-symbol';\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartImage\n};\n\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\r\n   * Start of label (image) start.\r\n   *\r\n   * ```markdown\r\n   * > | a ![b] c\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function start(code) {\n    assert(code === codes.exclamationMark, 'expected `!`');\n    effects.enter(types.labelImage);\n    effects.enter(types.labelImageMarker);\n    effects.consume(code);\n    effects.exit(types.labelImageMarker);\n    return open;\n  }\n\n  /**\r\n   * After `!`, at `[`.\r\n   *\r\n   * ```markdown\r\n   * > | a ![b] c\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function open(code) {\n    if (code === codes.leftSquareBracket) {\n      effects.enter(types.labelMarker);\n      effects.consume(code);\n      effects.exit(types.labelMarker);\n      effects.exit(types.labelImage);\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\r\n   * After `![`.\r\n   *\r\n   * ```markdown\r\n   * > | a ![b] c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * This is needed in because, when GFM footnotes are enabled, images never\r\n   * form when started with a `^`.\r\n   * Instead, links form:\r\n   *\r\n   * ```markdown\r\n   * ![^a](b)\r\n   *\r\n   * ![^a][b]\r\n   *\r\n   * [b]: c\r\n   * ```\r\n   *\r\n   * ```html\r\n   * <p>!<a href=\\\"b\\\">^a</a></p>\r\n   * <p>!<a href=\\\"c\\\">^a</a></p>\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === codes.caret && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","map":{"version":3,"names":["ok","assert","codes","types","labelEnd","labelStartImage","name","resolveAll","tokenize","tokenizeLabelStartImage","effects","nok","self","start","code","exclamationMark","enter","labelImage","labelImageMarker","consume","exit","open","leftSquareBracket","labelMarker","after","caret","parser","constructs"],"sources":["C:/Users/smart/Downloads/Final Project P20119/makeathon-2025/makeathon/node_modules/micromark-core-commonmark/dev/lib/label-start-image.js"],"sourcesContent":["/**\r\n * @import {\r\n *   Construct,\r\n *   State,\r\n *   TokenizeContext,\r\n *   Tokenizer\r\n * } from 'micromark-util-types'\r\n */\r\n\r\nimport {ok as assert} from 'devlop'\r\nimport {codes, types} from 'micromark-util-symbol'\r\nimport {labelEnd} from './label-end.js'\r\n\r\n/** @type {Construct} */\r\nexport const labelStartImage = {\r\n  name: 'labelStartImage',\r\n  resolveAll: labelEnd.resolveAll,\r\n  tokenize: tokenizeLabelStartImage\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeLabelStartImage(effects, ok, nok) {\r\n  const self = this\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of label (image) start.\r\n   *\r\n   * ```markdown\r\n   * > | a ![b] c\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    assert(code === codes.exclamationMark, 'expected `!`')\r\n    effects.enter(types.labelImage)\r\n    effects.enter(types.labelImageMarker)\r\n    effects.consume(code)\r\n    effects.exit(types.labelImageMarker)\r\n    return open\r\n  }\r\n\r\n  /**\r\n   * After `!`, at `[`.\r\n   *\r\n   * ```markdown\r\n   * > | a ![b] c\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function open(code) {\r\n    if (code === codes.leftSquareBracket) {\r\n      effects.enter(types.labelMarker)\r\n      effects.consume(code)\r\n      effects.exit(types.labelMarker)\r\n      effects.exit(types.labelImage)\r\n      return after\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After `![`.\r\n   *\r\n   * ```markdown\r\n   * > | a ![b] c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * This is needed in because, when GFM footnotes are enabled, images never\r\n   * form when started with a `^`.\r\n   * Instead, links form:\r\n   *\r\n   * ```markdown\r\n   * ![^a](b)\r\n   *\r\n   * ![^a][b]\r\n   *\r\n   * [b]: c\r\n   * ```\r\n   *\r\n   * ```html\r\n   * <p>!<a href=\\\"b\\\">^a</a></p>\r\n   * <p>!<a href=\\\"c\\\">^a</a></p>\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    // To do: use a new field to do this, this is still needed for\r\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\r\n    // behavior isn’t.\r\n    // Hidden footnotes hook.\r\n    /* c8 ignore next 3 */\r\n    return code === codes.caret &&\r\n      '_hiddenFootnoteSupport' in self.parser.constructs\r\n      ? nok(code)\r\n      : ok(code)\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,EAAE,IAAIC,MAAM,QAAO,QAAQ;AACnC,SAAQC,KAAK,EAAEC,KAAK,QAAO,uBAAuB;AAClD,SAAQC,QAAQ,QAAO,gBAAgB;;AAEvC;AACA,OAAO,MAAMC,eAAe,GAAG;EAC7BC,IAAI,EAAE,iBAAiB;EACvBC,UAAU,EAAEH,QAAQ,CAACG,UAAU;EAC/BC,QAAQ,EAAEC;AACZ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,SAASA,uBAAuBA,CAACC,OAAO,EAAEV,EAAE,EAAEW,GAAG,EAAE;EACjD,MAAMC,IAAI,GAAG,IAAI;EAEjB,OAAOC,KAAK;;EAEZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASA,KAAKA,CAACC,IAAI,EAAE;IACnBb,MAAM,CAACa,IAAI,KAAKZ,KAAK,CAACa,eAAe,EAAE,cAAc,CAAC;IACtDL,OAAO,CAACM,KAAK,CAACb,KAAK,CAACc,UAAU,CAAC;IAC/BP,OAAO,CAACM,KAAK,CAACb,KAAK,CAACe,gBAAgB,CAAC;IACrCR,OAAO,CAACS,OAAO,CAACL,IAAI,CAAC;IACrBJ,OAAO,CAACU,IAAI,CAACjB,KAAK,CAACe,gBAAgB,CAAC;IACpC,OAAOG,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASA,IAAIA,CAACP,IAAI,EAAE;IAClB,IAAIA,IAAI,KAAKZ,KAAK,CAACoB,iBAAiB,EAAE;MACpCZ,OAAO,CAACM,KAAK,CAACb,KAAK,CAACoB,WAAW,CAAC;MAChCb,OAAO,CAACS,OAAO,CAACL,IAAI,CAAC;MACrBJ,OAAO,CAACU,IAAI,CAACjB,KAAK,CAACoB,WAAW,CAAC;MAC/Bb,OAAO,CAACU,IAAI,CAACjB,KAAK,CAACc,UAAU,CAAC;MAC9B,OAAOO,KAAK;IACd;IAEA,OAAOb,GAAG,CAACG,IAAI,CAAC;EAClB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASU,KAAKA,CAACV,IAAI,EAAE;IACnB;IACA;IACA;IACA;IACA;IACA,OAAOA,IAAI,KAAKZ,KAAK,CAACuB,KAAK,IACzB,wBAAwB,IAAIb,IAAI,CAACc,MAAM,CAACC,UAAU,GAChDhB,GAAG,CAACG,IAAI,CAAC,GACTd,EAAE,CAACc,IAAI,CAAC;EACd;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}