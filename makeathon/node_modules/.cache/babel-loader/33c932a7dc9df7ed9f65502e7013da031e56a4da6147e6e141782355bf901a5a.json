{"ast":null,"code":"/**\r\n * @import {\r\n *   Construct,\r\n *   State,\r\n *   TokenizeContext,\r\n *   Tokenizer\r\n * } from 'micromark-util-types'\r\n */\n\nimport { ok as assert } from 'devlop';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { codes, types } from 'micromark-util-symbol';\n\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n};\n\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n\n  /**\r\n   * Start of a hard break (escape).\r\n   *\r\n   * ```markdown\r\n   * > | a\\\r\n   *      ^\r\n   *   | b\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function start(code) {\n    assert(code === codes.backslash, 'expected `\\\\`');\n    effects.enter(types.hardBreakEscape);\n    effects.consume(code);\n    return after;\n  }\n\n  /**\r\n   * After `\\`, at eol.\r\n   *\r\n   * ```markdown\r\n   * > | a\\\r\n   *       ^\r\n   *   | b\r\n   * ```\r\n   *\r\n   *  @type {State}\r\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit(types.hardBreakEscape);\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","map":{"version":3,"names":["ok","assert","markdownLineEnding","codes","types","hardBreakEscape","name","tokenize","tokenizeHardBreakEscape","effects","nok","start","code","backslash","enter","consume","after","exit"],"sources":["C:/Users/smart/Downloads/Final Project P20119/makeathon-2025/makeathon/node_modules/micromark-core-commonmark/dev/lib/hard-break-escape.js"],"sourcesContent":["/**\r\n * @import {\r\n *   Construct,\r\n *   State,\r\n *   TokenizeContext,\r\n *   Tokenizer\r\n * } from 'micromark-util-types'\r\n */\r\n\r\nimport {ok as assert} from 'devlop'\r\nimport {markdownLineEnding} from 'micromark-util-character'\r\nimport {codes, types} from 'micromark-util-symbol'\r\n\r\n/** @type {Construct} */\r\nexport const hardBreakEscape = {\r\n  name: 'hardBreakEscape',\r\n  tokenize: tokenizeHardBreakEscape\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\r\n  return start\r\n\r\n  /**\r\n   * Start of a hard break (escape).\r\n   *\r\n   * ```markdown\r\n   * > | a\\\r\n   *      ^\r\n   *   | b\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    assert(code === codes.backslash, 'expected `\\\\`')\r\n    effects.enter(types.hardBreakEscape)\r\n    effects.consume(code)\r\n    return after\r\n  }\r\n\r\n  /**\r\n   * After `\\`, at eol.\r\n   *\r\n   * ```markdown\r\n   * > | a\\\r\n   *       ^\r\n   *   | b\r\n   * ```\r\n   *\r\n   *  @type {State}\r\n   */\r\n  function after(code) {\r\n    if (markdownLineEnding(code)) {\r\n      effects.exit(types.hardBreakEscape)\r\n      return ok(code)\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,EAAE,IAAIC,MAAM,QAAO,QAAQ;AACnC,SAAQC,kBAAkB,QAAO,0BAA0B;AAC3D,SAAQC,KAAK,EAAEC,KAAK,QAAO,uBAAuB;;AAElD;AACA,OAAO,MAAMC,eAAe,GAAG;EAC7BC,IAAI,EAAE,iBAAiB;EACvBC,QAAQ,EAAEC;AACZ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,SAASA,uBAAuBA,CAACC,OAAO,EAAET,EAAE,EAAEU,GAAG,EAAE;EACjD,OAAOC,KAAK;;EAEZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASA,KAAKA,CAACC,IAAI,EAAE;IACnBX,MAAM,CAACW,IAAI,KAAKT,KAAK,CAACU,SAAS,EAAE,eAAe,CAAC;IACjDJ,OAAO,CAACK,KAAK,CAACV,KAAK,CAACC,eAAe,CAAC;IACpCI,OAAO,CAACM,OAAO,CAACH,IAAI,CAAC;IACrB,OAAOI,KAAK;EACd;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASA,KAAKA,CAACJ,IAAI,EAAE;IACnB,IAAIV,kBAAkB,CAACU,IAAI,CAAC,EAAE;MAC5BH,OAAO,CAACQ,IAAI,CAACb,KAAK,CAACC,eAAe,CAAC;MACnC,OAAOL,EAAE,CAACY,IAAI,CAAC;IACjB;IAEA,OAAOF,GAAG,CAACE,IAAI,CAAC;EAClB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}